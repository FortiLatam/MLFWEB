{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FortiWeb - Machine Learning This workshop can be used for demo purposes of FortiWeb Machine Learning, or practice by configuring, exploring and testing the available features. It is intended to get you familiar with Machine Learning offered web application protection. The workshop covers the following topics: Demo : Machine Learning - Bot Detection (malicious client detection demo) Demo : Machine Learning - Anomaly Detection (input validation demo) Lab : Machine Learning - Anomaly Detection (configure and operational management) In case you need help you can reach out to https://docs.fortinet.com/product/fortiweb Environment The environment is using an partially preconfigured FortiWeb. Before you start the exercises you have to perform the manual preparation to configure the Lubuntu client. Login Details Device Username Password FortiWeb admin fortinet DVWA admin password bWAPP admin password Topology During the workshop we will use the environment as outlined below. All devices are deployed with a basic network setup, and should be reachable. Disclaimer Nothing contained in this article is intended to teach or encourage the use of security tools or methodologies for illegal or unethical purposes. Always act in a responsible manner. Make sure you have written permission from the proper individuals before you use any of the tools or techniques described here outside this environment.","title":"Introduction"},{"location":"#fortiweb-machine-learning","text":"This workshop can be used for demo purposes of FortiWeb Machine Learning, or practice by configuring, exploring and testing the available features. It is intended to get you familiar with Machine Learning offered web application protection. The workshop covers the following topics: Demo : Machine Learning - Bot Detection (malicious client detection demo) Demo : Machine Learning - Anomaly Detection (input validation demo) Lab : Machine Learning - Anomaly Detection (configure and operational management) In case you need help you can reach out to https://docs.fortinet.com/product/fortiweb","title":"FortiWeb - Machine Learning"},{"location":"#environment","text":"The environment is using an partially preconfigured FortiWeb. Before you start the exercises you have to perform the manual preparation to configure the Lubuntu client.","title":"Environment"},{"location":"#login-details","text":"Device Username Password FortiWeb admin fortinet DVWA admin password bWAPP admin password","title":"Login Details"},{"location":"#topology","text":"During the workshop we will use the environment as outlined below. All devices are deployed with a basic network setup, and should be reachable.","title":"Topology"},{"location":"#disclaimer","text":"Nothing contained in this article is intended to teach or encourage the use of security tools or methodologies for illegal or unethical purposes. Always act in a responsible manner. Make sure you have written permission from the proper individuals before you use any of the tools or techniques described here outside this environment.","title":"Disclaimer"},{"location":"fwb-api-machinelearning/","text":"FortiWEB API Protection FortiWeb secures API interfaces, whether they are implemented using XML, JSON API, or RESTful API. FortiWeb parses the contents of each call and applies WAF policy validation to protect the application from malicious traffic. XML is commonly used for data exchange. Hackers sometimes try to exploit security holes in XML code to attack web servers. JSON is a lightweight data-interchange format, Attackers may try to exploit sensitive information in JSON code to attack web servers. OpenAPI Specification (OAS) defines a standard, language agnostic interface to RESTful APIs, which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, you can understand and interact with the remote service with a minimal amount of implementation logic. OpenAPI is becoming a popular tool and the de-facto standard how APIs are described. API Gateway provides the following functions: API user management, API key verification, API access control, Rate limit control, API call rewriting. Mobile API: Mobile devices are increasing being used for accessing web servers. These applications are increasing being attacked and need protection. 1.0 FortiWEB API Protection (Machine Learning) With the release of FortiWEB v7.0, API Protection (Machine Learning) was released. The machine learning based API Protection learns the REST API data structure from user traffic samples and then build a mathematical model to screen out malicious API requests. It analyzes the method, URL, and endpoint data of the API request samples to generate an API data structure file for your application. This file describes the URL pattern and schema of endpoint data. If the incoming API request violates the data structure, it will be detected as an attack. API Protection supports JSON request body or responses. 2.0 API Discovery A successful REST API sample (request & response) must follow the server\u2019s API specification API discovery: restore the API specification from user traffic by profiling API samples. One key step in API discovery is to determine whether multiple API samples belong to the same API. The API discovery problem can be formulated as an unsupervised learning problem which can be solved by clustering algorithms. We designed a new clustering algorithm, URL clustering with schema awareness, to solve the problem. The algorithm can be considered as a variant of the well-known leader clustering algorithm. Clustering is often used as a data analysis technique for discovering interesting patterns in data, such as grouping customers based on their behaviour. 2.1 API - 10 Dimensions examined URL distance Generalized Hamming distance for vectorized URLs Path parameters Schema of parameters in URL path Query parameters Schema of parameters appended to the URL. Header parameters Schema of parameters in custom headers Cookie parameters Schema of cookie values HTTP request body Schema of HTTP request body HTTP method Type of HTTP methods, eg., GET, SET, PUT, POST... Media type Type of media type, e.g., XML, JSON, etc. HTTP status code Only successful requests shall be used for model training HTTP response body Schema of response body 2.2 High Level Architecture and System Components Preprocessing module: extract user data schema, construct API samples Inference module: evaluate the API samples with pre-trained machine learning models, feed sample outliers to the model training module, generate security scores for API samples Model training module: train ML models using our API profiling algorithm and send updates to the inference module API protection module: determine following actions based on security scores and user API protection policies.","title":"Fwb api machinelearning"},{"location":"fwb-api-machinelearning/#fortiweb-api-protection","text":"FortiWeb secures API interfaces, whether they are implemented using XML, JSON API, or RESTful API. FortiWeb parses the contents of each call and applies WAF policy validation to protect the application from malicious traffic. XML is commonly used for data exchange. Hackers sometimes try to exploit security holes in XML code to attack web servers. JSON is a lightweight data-interchange format, Attackers may try to exploit sensitive information in JSON code to attack web servers. OpenAPI Specification (OAS) defines a standard, language agnostic interface to RESTful APIs, which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, you can understand and interact with the remote service with a minimal amount of implementation logic. OpenAPI is becoming a popular tool and the de-facto standard how APIs are described. API Gateway provides the following functions: API user management, API key verification, API access control, Rate limit control, API call rewriting. Mobile API: Mobile devices are increasing being used for accessing web servers. These applications are increasing being attacked and need protection.","title":"FortiWEB API Protection"},{"location":"fwb-api-machinelearning/#10-fortiweb-api-protection-machine-learning","text":"With the release of FortiWEB v7.0, API Protection (Machine Learning) was released. The machine learning based API Protection learns the REST API data structure from user traffic samples and then build a mathematical model to screen out malicious API requests. It analyzes the method, URL, and endpoint data of the API request samples to generate an API data structure file for your application. This file describes the URL pattern and schema of endpoint data. If the incoming API request violates the data structure, it will be detected as an attack. API Protection supports JSON request body or responses.","title":"1.0 FortiWEB API Protection (Machine Learning)"},{"location":"fwb-api-machinelearning/#20-api-discovery","text":"A successful REST API sample (request & response) must follow the server\u2019s API specification API discovery: restore the API specification from user traffic by profiling API samples. One key step in API discovery is to determine whether multiple API samples belong to the same API. The API discovery problem can be formulated as an unsupervised learning problem which can be solved by clustering algorithms. We designed a new clustering algorithm, URL clustering with schema awareness, to solve the problem. The algorithm can be considered as a variant of the well-known leader clustering algorithm. Clustering is often used as a data analysis technique for discovering interesting patterns in data, such as grouping customers based on their behaviour.","title":"2.0 API Discovery"},{"location":"fwb-api-machinelearning/#21-api-10-dimensions-examined","text":"URL distance Generalized Hamming distance for vectorized URLs Path parameters Schema of parameters in URL path Query parameters Schema of parameters appended to the URL. Header parameters Schema of parameters in custom headers Cookie parameters Schema of cookie values HTTP request body Schema of HTTP request body HTTP method Type of HTTP methods, eg., GET, SET, PUT, POST... Media type Type of media type, e.g., XML, JSON, etc. HTTP status code Only successful requests shall be used for model training HTTP response body Schema of response body","title":"2.1 API - 10 Dimensions examined"},{"location":"fwb-api-machinelearning/#22-high-level-architecture-and-system-components","text":"Preprocessing module: extract user data schema, construct API samples Inference module: evaluate the API samples with pre-trained machine learning models, feed sample outliers to the model training module, generate security scores for API samples Model training module: train ML models using our API profiling algorithm and send updates to the inference module API protection module: determine following actions based on security scores and user API protection policies.","title":"2.2 High Level Architecture and System Components"},{"location":"fwb-machinelearning-advanced-old/","text":"Machine Learning for Anomaly Detection. Goal of this workshop is to run and test FortiWeb Machine Learning for Anomaly Detection in Reverse Proxy mode in three steps: Learn e-mail based model Step 1 of 2: building a model based on e-mail address input type. Test Goal: send valid+noise+anomaly+attack mixed traffic. Expected Result: Machine Learning to Detect, Block & Log relevant traffic. Rebuild small-number based model Step 2 of 2: Manually rebuild the model based on small numbers format as NEW input type. After that will trigger auto-rebuild based on long-date format as NEW input type Test Goal: run traffic with NEW type of parameter. Expected Result: Manually forcing Machine Learning to rebuild its model according to the NEW type of parameter inputs( number-small ). Machine Learning to auto-rebuild its model according to the NEW type of parameter inputs( date-long ). Test: run traffic with ADDITIONAL type of parameter. Expected Result: Machine Learning to relearn its model by keeping previous samples and merging them with additional ADDITIONAL type of parameter inputs. Please read following REMINDERS if not seen before. Then, run following A, B, C steps below in the right order. A. Configuration Setup. B. Step 1/2: building a model based on EMAIL input type. C. Step 2/2: re-building the model based on SHORT date format input type. Let's now check the configuration and run following tests. A. Configuration Setup. B. Step 1/2: building a model based on username@domain.com USERNAME input type. C. Step 2/2: re-building the model based on LONG date format input type. A. Configuration Setup Note: Make sure you have done the manual preparation first to complete the environment! Then, set the configuration by following steps: A.1. Enable ML-logging (This is for verification only, it has been preconfigured) Log&Report > Log Config > Other Log Settings Enable Traffic Packer log: Enable Machine Learning: Enable Apply A.2. Configure Machine Learning (This is for verification only, it has been preconfigured. Just make sure there is no protection Profile apply) Policy > Server Policy > Finance Web Protection Profile: [Please Select...] (If This is still having a profile please change it) OK (Make sure you hit the OK first, else the Web Protection Profile will not be saved) Machine Learning > Create Here are the steps to enable Machine Learning Anomaly from scratch: Allow sample collection for domain: finance.fortinet.demo Create This is what you will see on the FortiWeb as it is preconfigured A.3. Enable Machine Learning advanced settings from CLI (This is for verification only, it has been preconfigured) config waf machine-learning-policy edit 1 set sample-limit-by-ip 0 set boxplot-checking-interval 1 end sample-limit-by-ip 0 - will accept unlimited requests per source IP. boxplot-checking-interval 1 - will test application change every minute. A.4. Edit Anomaly Detection Configuration Configure Machine Learning to be more sensitive to change, this is just for this lab exercise and not part of best practices. Machine Learning > Machine Learning Policy > Finance Sample Collection Mode: Normal (preconfigured) Update parameter model when number of boxplots do not overlap: 1 (preconfigured) Application Change Sensitivity: High (preconfigured) OK B. E-mail address input Step 1/2: Building a model based on e-mail address input type. Test Goal: send valid+noise+anomaly+attack mixed traffic. Expected Result: Machine Learning to Detect, Block & Log relevant traffic. B.1. Parameter Building B.1.1. Launch Traffic Generator Script from Lubuntu Client in order to send ==email== format inputs to the web application lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email B.1.2. Manually Submit some POST with non-regular inputs before model status is in Running stage Browse http://finance.fortinet.demo/fwb/index.html Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit following inputs in firstname field: \\<script>alert\\</script> 1 or 1=1 xxxxxxx xxx.xxx@xxx.xxx Wed May 17 10:59:36 EDT 2006 02 08 2010 09:44:57 abc;$compress_message=gzcompress(\"hack message\", 12) Check Attack Log if you get blocked. Analyze Attack Log. B.1.3. Check firstname HMM Learning Stage changes under Tree View until firstname is on running stage Collecting Testing Running B.1.4. Manually re-Submit same POST with non-regular inputs when model status is in Running stage Browse http://finance.fortinet.demo/fwb/index.html Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Re-Submit same inputs in firstname field: \\<script>alert\\</script> 1 or 1=1 /%3F%3F%3F/1%3F - /???/1? xxx.xxx@xxx.xxx Wed May 17 10:59:36 EDT 2006 02 08 2010 09:44:57 abc;$compress_message=gzcompress(\"hack message\", 12) Check Attack Log if you get blocked. Analyze Attack Log. B.2. Exceptions Create Exceptions in order to white list some non-regular inputs Create Exceptions for some inputs in firstname field abc;$compress_message=gzcompress(\"hack message\", 12) Browse http://finance.fortinet.demo/fwb/index.html Re-submit abc;$compress_message=gzcompress(\"hack message\", 12) again, they should NOT be blocked. Please have ALL the additional samples deleted before moving to the next excercise! Machine Learning > Anomaly Detection > Finance Double click on finance.fortinet.demo (or hamburger menu) > Parameter View firstname > Additional Samples B.3. Adjust Strictness Change Strictness Level for Anomaly in order to accept some more Anomalies inside the model B.3.1. Launch Traffic Generator Script from Lubuntu Client in order to send ==email== format inputs to the web application lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email B.3.2. Change Stricness Level for Anomaly Machine Learning > Anomaly Detection > Finance Double click on finance.fortinet.demo (or hamburger menu) > Parameter View firstname > Change Custom Sigma to 1 See new Anomaly Strictness graph. See new Anomaly Samples. Test one of the Amomaly Samples. B.4. Noisy Samples Test Select and test some of the Noisy Samples Noisy Samples are not participating to model building. Note: This is to be done on the http://finance.fortinet.demo/fwb/index.html page not on the FortiWeb. Select some of the Noisy Samples Submit them in firstname parameter Check the Log On the Finance Application, there is no impact on the Noisy Sample being submitted as they don't contain any threat. C. Manual rebuild Step 2/2: Manually re-building the model based on number-small format as NEW input type. Then trigger auto-rebuild based on date-long format as NEW input type. Test Goal: run traffic with NEW type of parameter. Expected Result: Manually forcing Machine Learning to rebuild its model according to the NEW type of parameter inputs(==number-small==). Machine Learning to auto-rebuild its model according to the NEW type of parameter inputs(==date-long==). C.1. Manual Parameter Rebuilding C.1.1. Manually forcing Paramerter Rebuild Machine Learning > Anomaly Detection > Finance Double click on finance.fortinet.demo (or hamburger menu) > Parameter View firstname > Operation > Rebuild Parameter OK Notice the manual Rebuild Parameter will remove firstname parameter and you can see it on the tree view, firstname parameter is no longer listed. C.1.2. Launch Traffic Generator Script from Lubuntu Client in order to send ==number-small== format inputs to the web application lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: number-small C.1.3. Check firstname HMM Learning Stage changes under Tree View until firstname is on running stage Running C.1.4. Check Parameter View details for just rebuilt firstname model C.1.5 Manually test some ==number-small==, ==email== and ==dates== samples into firstname field Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit 12345678 Submit YgX5M5fzgw@TNd3jawkWUC.jTPm Submit 02 08 2010 09:44:57 Submit Wed May 17 10:59:36 EDT 2006 Notice that all 4 samples are submmited successfully. From user point of view there is no difference. Now do the same test but this time on the FortiWeb Machine Learning > Machine Learning Policy > Finance > Parameter View firstname > Test Sample 12345678 YgX5M5fzgw@TNd3jawkWUC.jTPm 02 08 2010 09:44:57 Wed May 17 10:59:36 EDT 2006 Only number input will be rated as Normal , other input formats will be rated as Anomaly C.2 Auto-rebuild trigger Triggering auto-rebuild with date-long new Input C.2.1. Launch Traffic Generator Script from Lubuntu Client in order to send ==date-long== format inputs to the web application lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 5000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: date-long firstname parameter will be changin it's state from Running -> Collecting -> Building -> Testing -> Running This is done automatically and you can verify this on the Event tab when firstname parameter is at Running state C.2.2 Manually test some ==number-small==, ==email== and dates samples into firstname field Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit 12345678 Submit YgX5M5fzgw@TNd3jawkWUC.jTPm Submit 02 08 2010 09:44:57 Submit Wed May 17 10:59:36 EDT 2006 Notice that all 4 samples are submmited successfully. From user point of view there is no difference. Now do the same test but this time on the FortiWeb Machine Learning > Machine Learning Policy > Finance > Parameter View firstname > Test Sample 12345678 YgX5M5fzgw@TNd3jawkWUC.jTPm 02 08 2010 09:44:57 Wed May 17 10:59:36 EDT 2006 Only Longdate is rated as Normal , Shortdate , numbers and email are rated as Anomaly SUMMARY Legacy WAF: Negative Security: Signatures :-( Negative+Positive Security: Application Learning :-( FortiWeb NG-WAF Machine Learning AI Layer1: Anomaly Detection (HMM) Layer2: Attack Identification (SVM) :-) Detect ZERO DAYs :-) No False Positive / No False Negative :-) No possible EVASION :-) No Tuning (FP/FN/Application Change) This workshop is now complete.","title":"Fwb machinelearning advanced old"},{"location":"fwb-machinelearning-advanced-old/#machine-learning-for-anomaly-detection","text":"Goal of this workshop is to run and test FortiWeb Machine Learning for Anomaly Detection in Reverse Proxy mode in three steps:","title":"Machine Learning for Anomaly Detection."},{"location":"fwb-machinelearning-advanced-old/#learn-e-mail-based-model","text":"Step 1 of 2: building a model based on e-mail address input type. Test Goal: send valid+noise+anomaly+attack mixed traffic. Expected Result: Machine Learning to Detect, Block & Log relevant traffic.","title":"Learn e-mail based model"},{"location":"fwb-machinelearning-advanced-old/#rebuild-small-number-based-model","text":"Step 2 of 2: Manually rebuild the model based on small numbers format as NEW input type. After that will trigger auto-rebuild based on long-date format as NEW input type Test Goal: run traffic with NEW type of parameter. Expected Result: Manually forcing Machine Learning to rebuild its model according to the NEW type of parameter inputs( number-small ). Machine Learning to auto-rebuild its model according to the NEW type of parameter inputs( date-long ). Test: run traffic with ADDITIONAL type of parameter. Expected Result: Machine Learning to relearn its model by keeping previous samples and merging them with additional ADDITIONAL type of parameter inputs. Please read following REMINDERS if not seen before. Then, run following A, B, C steps below in the right order. A. Configuration Setup. B. Step 1/2: building a model based on EMAIL input type. C. Step 2/2: re-building the model based on SHORT date format input type. Let's now check the configuration and run following tests. A. Configuration Setup. B. Step 1/2: building a model based on username@domain.com USERNAME input type. C. Step 2/2: re-building the model based on LONG date format input type.","title":"Rebuild small-number based model"},{"location":"fwb-machinelearning-advanced-old/#a-configuration-setup","text":"Note: Make sure you have done the manual preparation first to complete the environment! Then, set the configuration by following steps:","title":"A. Configuration Setup"},{"location":"fwb-machinelearning-advanced-old/#a1-enable-ml-logging","text":"(This is for verification only, it has been preconfigured) Log&Report > Log Config > Other Log Settings Enable Traffic Packer log: Enable Machine Learning: Enable Apply","title":"A.1. Enable ML-logging"},{"location":"fwb-machinelearning-advanced-old/#a2-configure-machine-learning","text":"(This is for verification only, it has been preconfigured. Just make sure there is no protection Profile apply) Policy > Server Policy > Finance Web Protection Profile: [Please Select...] (If This is still having a profile please change it) OK (Make sure you hit the OK first, else the Web Protection Profile will not be saved) Machine Learning > Create Here are the steps to enable Machine Learning Anomaly from scratch: Allow sample collection for domain: finance.fortinet.demo Create This is what you will see on the FortiWeb as it is preconfigured","title":"A.2. Configure Machine Learning"},{"location":"fwb-machinelearning-advanced-old/#a3-enable-machine-learning-advanced-settings-from-cli","text":"(This is for verification only, it has been preconfigured) config waf machine-learning-policy edit 1 set sample-limit-by-ip 0 set boxplot-checking-interval 1 end sample-limit-by-ip 0 - will accept unlimited requests per source IP. boxplot-checking-interval 1 - will test application change every minute.","title":"A.3. Enable Machine Learning advanced settings from CLI"},{"location":"fwb-machinelearning-advanced-old/#a4-edit-anomaly-detection-configuration","text":"Configure Machine Learning to be more sensitive to change, this is just for this lab exercise and not part of best practices. Machine Learning > Machine Learning Policy > Finance Sample Collection Mode: Normal (preconfigured) Update parameter model when number of boxplots do not overlap: 1 (preconfigured) Application Change Sensitivity: High (preconfigured) OK","title":"A.4. Edit Anomaly Detection Configuration"},{"location":"fwb-machinelearning-advanced-old/#b-e-mail-address-input","text":"Step 1/2: Building a model based on e-mail address input type. Test Goal: send valid+noise+anomaly+attack mixed traffic. Expected Result: Machine Learning to Detect, Block & Log relevant traffic.","title":"B. E-mail address input"},{"location":"fwb-machinelearning-advanced-old/#b1-parameter-building","text":"","title":"B.1. Parameter Building"},{"location":"fwb-machinelearning-advanced-old/#b11-launch-traffic-generator-script-from-lubuntu-client-in-order-to-send-email-format-inputs-to-the-web-application","text":"lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email","title":"B.1.1. Launch Traffic Generator Script from Lubuntu Client in order to send ==email== format inputs to the web application"},{"location":"fwb-machinelearning-advanced-old/#b12-manually-submit-some-post-with-non-regular-inputs-before-model-status-is-in-running-stage","text":"Browse http://finance.fortinet.demo/fwb/index.html Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit following inputs in firstname field: \\<script>alert\\</script> 1 or 1=1 xxxxxxx xxx.xxx@xxx.xxx Wed May 17 10:59:36 EDT 2006 02 08 2010 09:44:57 abc;$compress_message=gzcompress(\"hack message\", 12) Check Attack Log if you get blocked. Analyze Attack Log.","title":"B.1.2. Manually Submit some POST with non-regular inputs before model status is in Running stage"},{"location":"fwb-machinelearning-advanced-old/#b13-check-firstname-hmm-learning-stage-changes-under-tree-view-until-firstname-is-on-running-stage","text":"Collecting Testing Running","title":"B.1.3. Check firstname  HMM Learning Stage changes under Tree View until firstname is on running stage"},{"location":"fwb-machinelearning-advanced-old/#b14-manually-re-submit-same-post-with-non-regular-inputs-when-model-status-is-in-running-stage","text":"Browse http://finance.fortinet.demo/fwb/index.html Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Re-Submit same inputs in firstname field: \\<script>alert\\</script> 1 or 1=1 /%3F%3F%3F/1%3F - /???/1? xxx.xxx@xxx.xxx Wed May 17 10:59:36 EDT 2006 02 08 2010 09:44:57 abc;$compress_message=gzcompress(\"hack message\", 12) Check Attack Log if you get blocked. Analyze Attack Log.","title":"B.1.4. Manually re-Submit same POST with non-regular inputs when model status is in Running stage"},{"location":"fwb-machinelearning-advanced-old/#b2-exceptions","text":"Create Exceptions in order to white list some non-regular inputs Create Exceptions for some inputs in firstname field abc;$compress_message=gzcompress(\"hack message\", 12) Browse http://finance.fortinet.demo/fwb/index.html Re-submit abc;$compress_message=gzcompress(\"hack message\", 12) again, they should NOT be blocked. Please have ALL the additional samples deleted before moving to the next excercise! Machine Learning > Anomaly Detection > Finance Double click on finance.fortinet.demo (or hamburger menu) > Parameter View firstname > Additional Samples","title":"B.2. Exceptions"},{"location":"fwb-machinelearning-advanced-old/#b3-adjust-strictness","text":"Change Strictness Level for Anomaly in order to accept some more Anomalies inside the model","title":"B.3. Adjust Strictness"},{"location":"fwb-machinelearning-advanced-old/#b31-launch-traffic-generator-script-from-lubuntu-client-in-order-to-send-email-format-inputs-to-the-web-application","text":"lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email","title":"B.3.1. Launch Traffic Generator Script from Lubuntu Client in order to send ==email== format inputs to the web application"},{"location":"fwb-machinelearning-advanced-old/#b32-change-stricness-level-for-anomaly","text":"Machine Learning > Anomaly Detection > Finance Double click on finance.fortinet.demo (or hamburger menu) > Parameter View firstname > Change Custom Sigma to 1 See new Anomaly Strictness graph. See new Anomaly Samples. Test one of the Amomaly Samples.","title":"B.3.2. Change Stricness Level for Anomaly"},{"location":"fwb-machinelearning-advanced-old/#b4-noisy-samples-test","text":"Select and test some of the Noisy Samples Noisy Samples are not participating to model building. Note: This is to be done on the http://finance.fortinet.demo/fwb/index.html page not on the FortiWeb. Select some of the Noisy Samples Submit them in firstname parameter Check the Log On the Finance Application, there is no impact on the Noisy Sample being submitted as they don't contain any threat.","title":"B.4. Noisy Samples Test"},{"location":"fwb-machinelearning-advanced-old/#c-manual-rebuild","text":"Step 2/2: Manually re-building the model based on number-small format as NEW input type. Then trigger auto-rebuild based on date-long format as NEW input type. Test Goal: run traffic with NEW type of parameter. Expected Result: Manually forcing Machine Learning to rebuild its model according to the NEW type of parameter inputs(==number-small==). Machine Learning to auto-rebuild its model according to the NEW type of parameter inputs(==date-long==).","title":"C. Manual rebuild"},{"location":"fwb-machinelearning-advanced-old/#c1-manual-parameter-rebuilding","text":"","title":"C.1. Manual Parameter Rebuilding"},{"location":"fwb-machinelearning-advanced-old/#c11-manually-forcing-paramerter-rebuild","text":"Machine Learning > Anomaly Detection > Finance Double click on finance.fortinet.demo (or hamburger menu) > Parameter View firstname > Operation > Rebuild Parameter OK Notice the manual Rebuild Parameter will remove firstname parameter and you can see it on the tree view, firstname parameter is no longer listed.","title":"C.1.1. Manually forcing Paramerter Rebuild"},{"location":"fwb-machinelearning-advanced-old/#c12-launch-traffic-generator-script-from-lubuntu-client-in-order-to-send-number-small-format-inputs-to-the-web-application","text":"lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: number-small","title":"C.1.2. Launch Traffic Generator Script from Lubuntu Client in order to send ==number-small== format inputs to the web application"},{"location":"fwb-machinelearning-advanced-old/#c13-check-firstname-hmm-learning-stage-changes-under-tree-view-until-firstname-is-on-running-stage","text":"Running","title":"C.1.3. Check firstname HMM Learning Stage changes under Tree View until firstname is on running stage"},{"location":"fwb-machinelearning-advanced-old/#c14-check-parameter-view-details-for-just-rebuilt-firstname-model","text":"","title":"C.1.4. Check Parameter View details for just rebuilt firstname model"},{"location":"fwb-machinelearning-advanced-old/#c15-manually-test-some-number-small-email-and-dates-samples-into-firstname-field","text":"Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit 12345678 Submit YgX5M5fzgw@TNd3jawkWUC.jTPm Submit 02 08 2010 09:44:57 Submit Wed May 17 10:59:36 EDT 2006 Notice that all 4 samples are submmited successfully. From user point of view there is no difference. Now do the same test but this time on the FortiWeb Machine Learning > Machine Learning Policy > Finance > Parameter View firstname > Test Sample 12345678 YgX5M5fzgw@TNd3jawkWUC.jTPm 02 08 2010 09:44:57 Wed May 17 10:59:36 EDT 2006 Only number input will be rated as Normal , other input formats will be rated as Anomaly","title":"C.1.5 Manually test some ==number-small==, ==email== and ==dates== samples into firstname field"},{"location":"fwb-machinelearning-advanced-old/#c2-auto-rebuild-trigger","text":"Triggering auto-rebuild with date-long new Input","title":"C.2 Auto-rebuild trigger"},{"location":"fwb-machinelearning-advanced-old/#c21-launch-traffic-generator-script-from-lubuntu-client-in-order-to-send-date-long-format-inputs-to-the-web-application","text":"lubuntu@lubuntu:~$ cd ~ lubuntu@lubuntu:~$ ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 5000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: date-long firstname parameter will be changin it's state from Running -> Collecting -> Building -> Testing -> Running This is done automatically and you can verify this on the Event tab when firstname parameter is at Running state","title":"C.2.1. Launch Traffic Generator Script from Lubuntu Client in order to send ==date-long== format inputs to the web application"},{"location":"fwb-machinelearning-advanced-old/#c22-manually-test-some-number-small-email-and-dates-samples-into-firstname-field","text":"Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit 12345678 Submit YgX5M5fzgw@TNd3jawkWUC.jTPm Submit 02 08 2010 09:44:57 Submit Wed May 17 10:59:36 EDT 2006 Notice that all 4 samples are submmited successfully. From user point of view there is no difference. Now do the same test but this time on the FortiWeb Machine Learning > Machine Learning Policy > Finance > Parameter View firstname > Test Sample 12345678 YgX5M5fzgw@TNd3jawkWUC.jTPm 02 08 2010 09:44:57 Wed May 17 10:59:36 EDT 2006 Only Longdate is rated as Normal , Shortdate , numbers and email are rated as Anomaly SUMMARY Legacy WAF: Negative Security: Signatures :-( Negative+Positive Security: Application Learning :-( FortiWeb NG-WAF Machine Learning AI Layer1: Anomaly Detection (HMM) Layer2: Attack Identification (SVM) :-) Detect ZERO DAYs :-) No False Positive / No False Negative :-) No possible EVASION :-) No Tuning (FP/FN/Application Change) This workshop is now complete.","title":"C.2.2 Manually test some ==number-small==, ==email== and dates samples into firstname field"},{"location":"fwb-machinelearning-advanced/","text":"Machine Learning - Anomaly Detection. 1. Lab Scope The scope of the workshop is to configure and gain more in-depth understand of Machine Learning - Anomaly Detection . Anomaly Detection is all about input validation of data entered into the web application. Protecting against data leakage or exploitation of the web appliction or the server. In this exercice we will simulate a customer situation in which we will cover both controlled and uncontrolled web application changes. In other words, the application is changed with and without notifying the WAF administrator about the web application changes. This will give insights into how FWB will automatically adapt to and adjust the machine learning protection. During this lab the web application will only be protected by Machine Learning - Anomaly Detection. The following sequencial steps will be performed to configure, simulate, and validate the protection provided by Machine Learning - Anomaly Detection. Access and attack the unprotected web application Enable Machine Learning - Anomaly Detection Auto-learn the mathematical protection model and re-attack the application, validate protection Perform a controlled application change, validate protection Perform an uncontrolled appliation chage, validate protection Manually adjust ML-AD configuration to increase security strictness During the exercise we will use web application http://finance.fortinet.demo/ and only the Firstname input field of the form. (You can use any of the other form fields to repeat or try different scenarios youself) 2. Configuration Setup NOTE: Make sure you have done the \"Preparation (mandarory)\" first, to complete the environment setup! NOTE: Make sure Machine Learning - Bot Detection is in \"Stop\" state! Then environmnet is already partly configured and we walk you through it. 2.1 Enable Packet and ML logging To log the packet content and retain packet payload for machine learning events, it was enabled for logging. Log&Report > Log Config > Other Log Settings Enable Traffic Packer log: Enable Machine Learning: Enable Apply 2.2 Enable Machine Learning Machine Learning can be enabled on a per Server Policy basis and already enabled for the Finance application. Policy > Server Policy > Finance Web Protection Profile: <blanc> (Select blank if a profile is configured) OK (Make sure you click OK to save, in case you needed to change profile selection.) The following steps were performed to enable Machine Learning Anomaly Allow sample collection for domain: finance.fortinet.demo OK The pre-configured Server Policy should be as shown below 2.3 Machine Learning CLI settings By default FortiWeb will apply logic to learn intelligently good web traffic and not from a single source IP but multiple unique source IP's. For the lab environment we needed to override this logic because we have only a single client. Note : The following config changes are already pre-configured. You need to reapply them when you delete or recreated the Machine Learning - Anomaly Detection profile. config waf machine-learning-policy edit 1 set sample-limit-by-ip 0 set ip-expire-cnts 1 end sample-limit-by-ip 0 (accept unlimited requests per source IP) ip-expire-cnts 1 (minimal number of unique source IP-addresses) 2.4. Anomaly Detection Settings The sensitivity level for this exercise, the \"Strictness Level for Anomaly\" is set to the default value 3 (Standard Deviation). After you finished the full exercise you could rerun the exercise and increase/decrease the level to observe different learning behavior. Machine Learning > Machine Learning Policy > Finance 3. Attack Application Browse http://finance.fortinet.demo/fwb/index.html Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit following inputs in firstname field: <script>alert</script> '1 or 1=1 xxxxxxx xxx.xxx@xxx.xxx Wed May 17 10:59:36 EDT 2006 02 08 2010 09:44:57 abc;$compress_message=gzcompress(\"hack message\", %252012) 1234567890 4. Build Machine Learning Model ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email If you're fast enough you will see the auto learning of the application tree and input fields, together with the status. Just after a few seconds (~20) you will notice that Machine Learning switched from Collecting to Running mode, and protects the Firstname field. Machine Learning will keep learning after being in Running mode and adjust the mathimatical model based on additional requests received. The second Collecting, Building and Running phase happened with this exercise after approax 2 minutes. You can notice the differences on the Distribution of Anomalies and Anomaly Strictness graphs. Now the mathimatical model for anomaly detection is created, fwb flags some of the initial attacks we send as \"Noisy Sampes\" because they deviate to much from the model. 4.1 Sample Test We can validate input samples to see which will be recognized as normal and anomaly inputs. this can be done throught the \" Test Sample \" button. Run again through all the input values to see which are marked as Normal or Anomaly . We are going to repeate this step later after the controlled and uncontrolled web site changes as well. Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Normal Wed May 17 10:59:36 EDT 2006 Anomaly 02 08 2010 09:44:57 Anomaly abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Anomaly The Firstname form field was learned to have an email format like input, not strict but email alike. 5. Application Changes In this section we will examine how FortiWeb handles web application changes. This will be done by learning different input formats, simulating controlled and uncontrolled web application changes. NOTE: The minimum amount af time between rebuilding the mathimatical models is 15min. This can be increased up to 1440 mine per CLI (set renovate-short-time), but not lower then 15 minutes. Make sure that there's at least 15min inbetween finishing and starting the next generated traffic requests! 5.1 Controlled Change The web developer indicated that the Firstname\" input field changed to numeric input and would like to have this change adopted by the WAF administrator. This can do this by manually Rebuilding** the firstname parameter. This will drop the mathematical model and start the learning fresh. Next we generate web request to relearn the Firstname input field and create a new mathematical model to detect anomalies. This step could be done explicitly by the developer or just by taking user input. ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: number-small Let is run into the 2nd model after receiving the 3000 requests. Notice there are no more Noisy Samples which were there previously. 5.1.1 Sample Test Time to repeat the Sample Test on the newly created mathimatical model. Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Anomaly xxx.xxx@xxx.xxx Anomaly Wed May 17 10:59:36 EDT 2006 Anomaly 02 08 2010 09:44:57 Anomaly abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal It becomes clear that the firstname field no longer considers an email like format to be normal and send it to the second phase (SVM) to detect if the inpyt is malicious. 5.2 Uncontrolled Change Date Next step is to simulate the uncontrolled change by allowing a long date notation format into the application. ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: date-long The Firstname parameter will remain in Running state while detecting the application change. Moves shortly from Building to Running state once the new mathimatical model is generated. 5.2.1 Sample Test Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Anomaly Wed May 17 10:59:36 EDT 2006 Normal 02 08 2010 09:44:57 Normal abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal Due to the automatic relearning and rebuilding of the mathematical model, it merged the Number and Date format to match the model. Those inputs will be passed on to the web application without being send to the 2nd Machine Learning phase (SVM) for malicious detection. 5.3 Uncontroled Change Email ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Normal Wed May 17 10:59:36 EDT 2006 Normal 02 08 2010 09:44:57 Normal abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal 6. Manual Configuration 6.1 Strictness Level The FortiWeb administrator can manually adjust a few parameters. The Strictness Level for Anomaly for example. This allows the input to validate the input less or more exactly matching the model and by that sending more or less traffic for malicious inspection by SVM. If we set the latest learned model to strictness level 1, we will notice that xxx.xxx@xxx.xxx will not be seen as normal input anymore. Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Anomaly Wed May 17 10:59:36 EDT 2006 Normal 02 08 2010 09:44:57 Normal abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal 6.2 Noisy Samples In case there is specific input that violates the policy, or in the rare case of False Negative, then there is an option to manually add Additional Samples to the mathimatical model. Let us add two additional samples and test them on anomaly detection (HMM). Restesting the input via the Sample Test now shows it is marked as Normal input. SUMMARY Legacy WAF :-( Negative Security: Signatures :-( Negative+Positive Security :-( Application Learning FortiWeb WAAP with Machine Learning Layer1: Anomaly Detection (HMM) Layer2: Attack Identification (SVM) :-) Detect ZERO DAYs :-) No False Positive / No False Negative :-) No possible EVASION :-) No Tuning (FP/FN/Application Change) This workshop is now complete.","title":"Lab - Anomaly Detection"},{"location":"fwb-machinelearning-advanced/#machine-learning-anomaly-detection","text":"","title":"Machine Learning - Anomaly Detection."},{"location":"fwb-machinelearning-advanced/#1-lab-scope","text":"The scope of the workshop is to configure and gain more in-depth understand of Machine Learning - Anomaly Detection . Anomaly Detection is all about input validation of data entered into the web application. Protecting against data leakage or exploitation of the web appliction or the server. In this exercice we will simulate a customer situation in which we will cover both controlled and uncontrolled web application changes. In other words, the application is changed with and without notifying the WAF administrator about the web application changes. This will give insights into how FWB will automatically adapt to and adjust the machine learning protection. During this lab the web application will only be protected by Machine Learning - Anomaly Detection. The following sequencial steps will be performed to configure, simulate, and validate the protection provided by Machine Learning - Anomaly Detection. Access and attack the unprotected web application Enable Machine Learning - Anomaly Detection Auto-learn the mathematical protection model and re-attack the application, validate protection Perform a controlled application change, validate protection Perform an uncontrolled appliation chage, validate protection Manually adjust ML-AD configuration to increase security strictness During the exercise we will use web application http://finance.fortinet.demo/ and only the Firstname input field of the form. (You can use any of the other form fields to repeat or try different scenarios youself)","title":"1. Lab Scope"},{"location":"fwb-machinelearning-advanced/#2-configuration-setup","text":"NOTE: Make sure you have done the \"Preparation (mandarory)\" first, to complete the environment setup! NOTE: Make sure Machine Learning - Bot Detection is in \"Stop\" state! Then environmnet is already partly configured and we walk you through it.","title":"2. Configuration Setup"},{"location":"fwb-machinelearning-advanced/#21-enable-packet-and-ml-logging","text":"To log the packet content and retain packet payload for machine learning events, it was enabled for logging. Log&Report > Log Config > Other Log Settings Enable Traffic Packer log: Enable Machine Learning: Enable Apply","title":"2.1 Enable Packet and ML logging"},{"location":"fwb-machinelearning-advanced/#22-enable-machine-learning","text":"Machine Learning can be enabled on a per Server Policy basis and already enabled for the Finance application. Policy > Server Policy > Finance Web Protection Profile: <blanc> (Select blank if a profile is configured) OK (Make sure you click OK to save, in case you needed to change profile selection.) The following steps were performed to enable Machine Learning Anomaly Allow sample collection for domain: finance.fortinet.demo OK The pre-configured Server Policy should be as shown below","title":"2.2 Enable Machine Learning"},{"location":"fwb-machinelearning-advanced/#23-machine-learning-cli-settings","text":"By default FortiWeb will apply logic to learn intelligently good web traffic and not from a single source IP but multiple unique source IP's. For the lab environment we needed to override this logic because we have only a single client. Note : The following config changes are already pre-configured. You need to reapply them when you delete or recreated the Machine Learning - Anomaly Detection profile. config waf machine-learning-policy edit 1 set sample-limit-by-ip 0 set ip-expire-cnts 1 end sample-limit-by-ip 0 (accept unlimited requests per source IP) ip-expire-cnts 1 (minimal number of unique source IP-addresses)","title":"2.3 Machine Learning CLI settings"},{"location":"fwb-machinelearning-advanced/#24-anomaly-detection-settings","text":"The sensitivity level for this exercise, the \"Strictness Level for Anomaly\" is set to the default value 3 (Standard Deviation). After you finished the full exercise you could rerun the exercise and increase/decrease the level to observe different learning behavior. Machine Learning > Machine Learning Policy > Finance","title":"2.4. Anomaly Detection Settings"},{"location":"fwb-machinelearning-advanced/#3-attack-application","text":"Browse http://finance.fortinet.demo/fwb/index.html Note: You can copy and past the samples from AttackSamples.txt file located on the Lubuntu Desktop Submit following inputs in firstname field: <script>alert</script> '1 or 1=1 xxxxxxx xxx.xxx@xxx.xxx Wed May 17 10:59:36 EDT 2006 02 08 2010 09:44:57 abc;$compress_message=gzcompress(\"hack message\", %252012) 1234567890","title":"3. Attack Application"},{"location":"fwb-machinelearning-advanced/#4-build-machine-learning-model","text":"./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email If you're fast enough you will see the auto learning of the application tree and input fields, together with the status. Just after a few seconds (~20) you will notice that Machine Learning switched from Collecting to Running mode, and protects the Firstname field. Machine Learning will keep learning after being in Running mode and adjust the mathimatical model based on additional requests received. The second Collecting, Building and Running phase happened with this exercise after approax 2 minutes. You can notice the differences on the Distribution of Anomalies and Anomaly Strictness graphs. Now the mathimatical model for anomaly detection is created, fwb flags some of the initial attacks we send as \"Noisy Sampes\" because they deviate to much from the model.","title":"4. Build Machine Learning Model"},{"location":"fwb-machinelearning-advanced/#41-sample-test","text":"We can validate input samples to see which will be recognized as normal and anomaly inputs. this can be done throught the \" Test Sample \" button. Run again through all the input values to see which are marked as Normal or Anomaly . We are going to repeate this step later after the controlled and uncontrolled web site changes as well. Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Normal Wed May 17 10:59:36 EDT 2006 Anomaly 02 08 2010 09:44:57 Anomaly abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Anomaly The Firstname form field was learned to have an email format like input, not strict but email alike.","title":"4.1 Sample Test"},{"location":"fwb-machinelearning-advanced/#5-application-changes","text":"In this section we will examine how FortiWeb handles web application changes. This will be done by learning different input formats, simulating controlled and uncontrolled web application changes. NOTE: The minimum amount af time between rebuilding the mathimatical models is 15min. This can be increased up to 1440 mine per CLI (set renovate-short-time), but not lower then 15 minutes. Make sure that there's at least 15min inbetween finishing and starting the next generated traffic requests!","title":"5. Application Changes"},{"location":"fwb-machinelearning-advanced/#51-controlled-change","text":"The web developer indicated that the Firstname\" input field changed to numeric input and would like to have this change adopted by the WAF administrator. This can do this by manually Rebuilding** the firstname parameter. This will drop the mathematical model and start the learning fresh. Next we generate web request to relearn the Firstname input field and create a new mathematical model to detect anomalies. This step could be done explicitly by the developer or just by taking user input. ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: number-small Let is run into the 2nd model after receiving the 3000 requests. Notice there are no more Noisy Samples which were there previously.","title":"5.1 Controlled Change"},{"location":"fwb-machinelearning-advanced/#511-sample-test","text":"Time to repeat the Sample Test on the newly created mathimatical model. Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Anomaly xxx.xxx@xxx.xxx Anomaly Wed May 17 10:59:36 EDT 2006 Anomaly 02 08 2010 09:44:57 Anomaly abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal It becomes clear that the firstname field no longer considers an email like format to be normal and send it to the second phase (SVM) to detect if the inpyt is malicious.","title":"5.1.1 Sample Test"},{"location":"fwb-machinelearning-advanced/#52-uncontrolled-change-date","text":"Next step is to simulate the uncontrolled change by allowing a long date notation format into the application. ./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: date-long The Firstname parameter will remain in Running state while detecting the application change. Moves shortly from Building to Running state once the new mathimatical model is generated.","title":"5.2 Uncontrolled Change Date"},{"location":"fwb-machinelearning-advanced/#521-sample-test","text":"Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Anomaly Wed May 17 10:59:36 EDT 2006 Normal 02 08 2010 09:44:57 Normal abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal Due to the automatic relearning and rebuilding of the mathematical model, it merged the Number and Date format to match the model. Those inputs will be passed on to the web application without being send to the 2nd Machine Learning phase (SVM) for malicious detection.","title":"5.2.1 Sample Test"},{"location":"fwb-machinelearning-advanced/#53-uncontroled-change-email","text":"./FortiDemo-ML-AD-traffic.sh Enter choice: 9 Amount of requests: 3000 URL: http://finance.fortinet.demo/fwb/index.html Method: POST Parameter name: firstname Parameter type: email Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Normal Wed May 17 10:59:36 EDT 2006 Normal 02 08 2010 09:44:57 Normal abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal","title":"5.3 Uncontroled Change Email"},{"location":"fwb-machinelearning-advanced/#6-manual-configuration","text":"","title":"6. Manual Configuration"},{"location":"fwb-machinelearning-advanced/#61-strictness-level","text":"The FortiWeb administrator can manually adjust a few parameters. The Strictness Level for Anomaly for example. This allows the input to validate the input less or more exactly matching the model and by that sending more or less traffic for malicious inspection by SVM. If we set the latest learned model to strictness level 1, we will notice that xxx.xxx@xxx.xxx will not be seen as normal input anymore. Input Result <script>alert</script> Anomaly '1 or 1=1 Anomaly xxxxxxx Normal xxx.xxx@xxx.xxx Anomaly Wed May 17 10:59:36 EDT 2006 Normal 02 08 2010 09:44:57 Normal abc;$compress_message=gzcompress(\"hack message\", %252012) Anomaly 1234567890 Normal","title":"6.1 Strictness Level"},{"location":"fwb-machinelearning-advanced/#62-noisy-samples","text":"In case there is specific input that violates the policy, or in the rare case of False Negative, then there is an option to manually add Additional Samples to the mathimatical model. Let us add two additional samples and test them on anomaly detection (HMM). Restesting the input via the Sample Test now shows it is marked as Normal input. SUMMARY Legacy WAF :-( Negative Security: Signatures :-( Negative+Positive Security :-( Application Learning FortiWeb WAAP with Machine Learning Layer1: Anomaly Detection (HMM) Layer2: Attack Identification (SVM) :-) Detect ZERO DAYs :-) No False Positive / No False Negative :-) No possible EVASION :-) No Tuning (FP/FN/Application Change) This workshop is now complete.","title":"6.2 Noisy Samples"},{"location":"fwb-machinelearning-api/","text":"Machine Learning - API Protection NOTE: Current version of ML-API Protection supports RESTFul API using JSON parameters. 1. Lab Scope The scope of the workshop is to configure and gain more in-depth understanding of Machine Learning - API Protection . In this exercise we will: Build an API Protection Schema from legitimate Send traffic that violates the schema Check the Attack for each type of attack. During the exercise we will use web application http://dvwa.fortinet.demo/login.php and JSON parameters for example: curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\" SSH into the Lubuntu Client, if you want to Cut & Paste the Curl commands. In the example above we following API Endpoint anatomy: Method: POST URL: dvwa.fortinet.demo/login.php API-endpoint data: URL Parameter: username 2. Configuration Setup NOTE: Make sure you have done the \"Preparation (mandatory)\" first, to complete the environment setup! NOTE: Make sure Machine Learning - Bot Detection is in \"Stop\" state! Then environment is already partly configured and we walk you through it. Pre-check, to make sure your DVWA is up, check the following: 2.1 Enable API Protection Machine Learning can be enabled on a per Server Policy basis and already enabled for the Finance application. Policy > Server Policy > dvwa Web Protection Profile: Inline Alert Only OK (Make sure you click OK to save, in case you needed to change profile selection.) The following steps were performed to enable API Protection The three Machine Learning features of FortiWeb, are now shown. Select the API Protection and click the \"+\" button. Allow sample collection for domain: dvwa.fortinet.demo Enter a Trusted IP address range. This is needed to create the ML-API protection based on legitimate sources. This should always be done by a trusted host or hosts only. This is a Mandatory setting! OK The pre-configured Server Policy should be as shown below 2.3 API Protection CLI settings FortiWeb will apply logic to learn legitimate good API traffic from a single or multiple trusted source IP's. By default, FortiWeb will build an ML-API Protection model, based on 10+1 unique samples. This is because of CLI parameter start-training-cnt default is 10 . config waf api-learning-policy edit 1 set policy-id 3064114931877823360 config api-ip-list edit 1 set ip 10.2.2.1-10.2.2.254 next end set start-training-cnt 10 next end NOTE: As this is a first version on ML-API without deep-learning, it is recommended: That traffic learning should be done under QA environment. Set the \"start-training-cnt\" parameter according to the application. (Preconfigured by default 10) 2.4. API Protection Configuration We will no configure the policy to Alert & Deny bad API requests. Go to Machine Learning -> API Protection Open the DVWA Policy by double clicking the Name. Please change the Action Settings from Default \"Alert\" to \"Alert & Deny\" OK After selecting OK you will return to the the Server Policy screen again. Go to Machine Learning -> API Protection Open the DVWA Policy by double clicking the Name. To open the current blank profile before we learn traffic. Click on the View Domain Data We have a blank policy in which to build the API Protection automatically. This shows the Views of the Learning and Running status of Machine Learning. Please check there are no Machine Learning Events. 3. Build API Protection Model API requests can be generated with the api-legit.sh script on the Lubuntu Client. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Start API request script ./api-legit.sh Note: DVWA is not an API application, we are sending API JSON based traffic to get a 200 OK for each API request. This is mandatory to learn the Model. An example API JSON request is below: curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\" Note: Content-Type must be application/json Below is a snip of the DVWA HTML response: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> <title>Damn Vulnerable Web App (DVWA) - Login</title> <link rel=\"stylesheet\" type=\"text/css\" href=\"dvwa/css/login.css\" /> </head> <body> After the api-legit.sh script has run, the API learned Model will be complete. Now the model is created we can review the Tree View learned. Click on the POST Method learned, to show the \"Parameters\" learned tab: Click on the URL query parameter \"username\", to reveal the URL query parameter details Click on the Body tab to see the properties of the JSON parameters. FortiWeb ML-API learned the two JSON parameters for the URL query parameter \"username\", they are as follows: \"name\", which is a string of maxlength 6 and minlength 2 \"number\", which is a string of maxlength 2 and minlength 1 This means any API data sent to the name property must be between 2 and 6 chars, anything more or less will violate the schema and be blocked. Additionally if API data sent to the number property is is not either 1 or 2 chars long it will also violate the schema and be blocked. API View You can display the full ML-API schema details by double clicking on the POST Button for the POST Method entity \"/login.php\" The URL query parameter \"username\" is Required . This is mandatory for the schema validation. A more granular way is to use the Export button You chose the format and the path and method The differences between the formats is as follows: 3.1 Checking the Model Let's check the ML-API model is valid: curl -v -X POST -d '{\"name\":\"fred\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/json\" This is a legitimate request which contains new valid JSON & URL parameters, and should not be blocked. Let's check the Attack and the Traffic logs. As the request was valid, there is no entry in the Attack Log. Within the Traffic Log, we are able to see the valid request, including both the HTTP return code 200 and the raw body of the request. Note: ML-API will only build the model with requests that return an HTTP 2xx code 4. Launch API Attacks Launch attacks against the ML-API model. It's best to clear the Attack log after each attack, this will make it easier to see what is causing the attack to be blocked. On the Lubuntu Client or via an ssh terminal. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Copy and paste each API attack Curl command and run. Note: The Web Protection Profile being used ins \"Inline Alert Only\" Example attacks are as follows: 4.1.1 API Body Violation \"Number\" JSON parameter is missing in JSON body. Expected result is a body violation. curl -v -X POST -d '{\"name\":\"cloe\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\" 4.1.2 API Body Violation \"name\" JSON parameter is too long. Expected result, JSON parameter length violation. curl -v -X POST -d '{\"name\":\"ABCDEFGHIJ\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/json\" 4.1.3 URL query param violation \"username\" URL query parameter is too long. Expected result is a parameter violation. curl -v -X POST -d '{\"name\":\"cloe\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=abcdefghijk -H \"Content-Type: application/json\" 4.1.4 URL query param violation \"username\" URL query parameter is too short. Expected result is a parameter violation. curl -v -X POST -d '{\"name\":\"cloe\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=a -H \"Content-Type: application/json\" 4.2.1 Command injection in URL \"username\" URL query parameter will carry a Command Injection attack. Expected result, first signature violation (in Alert mode) and ML-API URL violation. curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='cmd.exe' -H \"Content-Type: application/json\" This attack creates two entries into the Attack log. As the Web Protection Profile is set to Inline Alert Only, this attack would've been blocked by known signatures within FortiWeb. Signatures are updated from FortiGuard Labs. The Attack has been blocked by ML-API, this is because the URL query parameter ML-API model has maxlength = 3 and the URL query parameter request is injecting 7 characters. And as such violates the schema, and is blocked. 4.2.2 Command injection in JSON \"name\" JSON parameter will carry a Command Injection attack. Expected result is a body violation. curl -v -X POST -d '{\"name\":\"cmd.exe\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='11' -H \"Content-Type: application/json\" 4.2.3 Zero-day in JSON \"name\" JSON parameter will carry a Zero Day attack. Expected result, JSON parameter violation. curl -X POST -d '{\"name\":\"fred\",\"number\":\"xx& var1=l var2=s ; \"$var1\"\"$var2\"\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/json\" 4.3 XSS in JSON \"name\" JSON parameter will carry an XSS attack. Expected result, JSON body violation. curl -v -X POST -d '{\"name\":\"<script>alert(123)</script>\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='22' -H \"Content-Type: application/json\" 4.4 Additional URL parameter URL will carry \"usernameB\" as an additional URL query parameter. Expected result, additional query parameter not allowed. curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' 'http://dvwa.fortinet.demo/login.php?username=11&usernameB=11B' -H \"Content-Type: application/json\" 4.5 Out of order JSON parameter JSON parameters will be sent in a new order. Expected result, parameter location violating the schema. curl -v -X POST -d '{\"number\u201d:\"11\",\"name\u201d:\"Rafa\"}' http://dvwa.fortinet.demo/login.php?username=111 -H \"Content-Type: application/json\" Note: ML-API was coded to respect \"propertyOrder\" JSON validation. 4.6 Non JSON Non JSON content-type attack or deviation, will not be detected by ML-API Model. curl -v -X POST -d '{\"name\":\"ABCDEFGHIJ\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/xml\" Traffic log is showing FortiWeb is allowing the non JSON request. Additional Use Cases Additional JSON parameter \"numberB\" additional JSON parameter will be sent. Expected result, no violation as additionalProperties JSON validation is NOT set by ML-API model. curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\",\"numberB\":\"1b\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\" This page is passed, without violating the API Schema, as the ML-API model is unaware of the new JSON parameter being sent. Double blended attack The following is an example of double blended attack inside both JSON parameter and URL query parameter. Expected result, ML-API will block the request due to URL query parameter length violation. Note: Attack log will show 4 events, the first are due to the Web Protection Profile being set to Inline Alert Only. This will show both signature and HTML Tag Based XSS Injection , none are blocked due to being in Alert mode. curl -v -X POST -d '{\"name\":\"cmd.exe\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='<script>alert(hacked)</script>' -H \"Content-Type: application/json\" Changing HTTP method The following is an example of changing the HTTP method, from a POST to a GET. Expected result, ML-API will allow the request due to not be part of the existing model. To block this request you would need to build a new ML-API model for the HTTP GET method. curl -v -X GET -d '{\"name\":\"cloe\",\"number\":\"5\"}' http://dvwa.fortinet.demo/login.php?name=11 -H \"Content-Type: application/json\" From within the Traffic log you will see FortiWeb is allowing the request Recommendations API Learning new method API GET requests can be generated with the api-get.sh script on the Lubuntu Client. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Start API request script ./api-get.sh Expected result as above shows the newly learned ML-API model for the GET method. The Tree View is now showing the GET method and JSON body parameters. Restricting API learning Paths Note: This should be set FIRST, before traffic learning * You can create a list of paths within the application where you want ML-API to learn. * Follow the example to setup In this example, only traffic matching the path \"/upload/api\" will be learned. API Model False Positive In the following example, \"name\" JSON parameter is longer than 6 characters in ML-API model, is legitimate but it violates the schema. curl -v -X POST -d '{\"name\":\"jonathon\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='11' -H \"Content-Type: application/json\" This is not an API attack but a legitimate request, however it exceeds the current maxlength for the JSON \"name\" parameter. To prevent this as a FALSE POSITIVE, you will need to relearn the API schema by sending new requests with the new maxlength. Today this is a manual process and is achieved by refreshing the ML-API policy. Just for information purposes. This workshop is now complete.","title":"Lab - API Protection"},{"location":"fwb-machinelearning-api/#machine-learning-api-protection","text":"NOTE: Current version of ML-API Protection supports RESTFul API using JSON parameters.","title":"Machine Learning - API Protection"},{"location":"fwb-machinelearning-api/#1-lab-scope","text":"The scope of the workshop is to configure and gain more in-depth understanding of Machine Learning - API Protection . In this exercise we will: Build an API Protection Schema from legitimate Send traffic that violates the schema Check the Attack for each type of attack. During the exercise we will use web application http://dvwa.fortinet.demo/login.php and JSON parameters for example: curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\" SSH into the Lubuntu Client, if you want to Cut & Paste the Curl commands. In the example above we following API Endpoint anatomy: Method: POST URL: dvwa.fortinet.demo/login.php API-endpoint data: URL Parameter: username","title":"1. Lab Scope"},{"location":"fwb-machinelearning-api/#2-configuration-setup","text":"NOTE: Make sure you have done the \"Preparation (mandatory)\" first, to complete the environment setup! NOTE: Make sure Machine Learning - Bot Detection is in \"Stop\" state! Then environment is already partly configured and we walk you through it. Pre-check, to make sure your DVWA is up, check the following:","title":"2. Configuration Setup"},{"location":"fwb-machinelearning-api/#21-enable-api-protection","text":"Machine Learning can be enabled on a per Server Policy basis and already enabled for the Finance application. Policy > Server Policy > dvwa Web Protection Profile: Inline Alert Only OK (Make sure you click OK to save, in case you needed to change profile selection.) The following steps were performed to enable API Protection The three Machine Learning features of FortiWeb, are now shown. Select the API Protection and click the \"+\" button. Allow sample collection for domain: dvwa.fortinet.demo Enter a Trusted IP address range. This is needed to create the ML-API protection based on legitimate sources. This should always be done by a trusted host or hosts only. This is a Mandatory setting! OK The pre-configured Server Policy should be as shown below","title":"2.1 Enable API Protection"},{"location":"fwb-machinelearning-api/#23-api-protection-cli-settings","text":"FortiWeb will apply logic to learn legitimate good API traffic from a single or multiple trusted source IP's. By default, FortiWeb will build an ML-API Protection model, based on 10+1 unique samples. This is because of CLI parameter start-training-cnt default is 10 . config waf api-learning-policy edit 1 set policy-id 3064114931877823360 config api-ip-list edit 1 set ip 10.2.2.1-10.2.2.254 next end set start-training-cnt 10 next end NOTE: As this is a first version on ML-API without deep-learning, it is recommended: That traffic learning should be done under QA environment. Set the \"start-training-cnt\" parameter according to the application. (Preconfigured by default 10)","title":"2.3 API Protection CLI settings"},{"location":"fwb-machinelearning-api/#24-api-protection-configuration","text":"We will no configure the policy to Alert & Deny bad API requests. Go to Machine Learning -> API Protection Open the DVWA Policy by double clicking the Name. Please change the Action Settings from Default \"Alert\" to \"Alert & Deny\" OK After selecting OK you will return to the the Server Policy screen again. Go to Machine Learning -> API Protection Open the DVWA Policy by double clicking the Name. To open the current blank profile before we learn traffic. Click on the View Domain Data We have a blank policy in which to build the API Protection automatically. This shows the Views of the Learning and Running status of Machine Learning. Please check there are no Machine Learning Events.","title":"2.4. API Protection Configuration"},{"location":"fwb-machinelearning-api/#3-build-api-protection-model","text":"API requests can be generated with the api-legit.sh script on the Lubuntu Client. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Start API request script ./api-legit.sh Note: DVWA is not an API application, we are sending API JSON based traffic to get a 200 OK for each API request. This is mandatory to learn the Model. An example API JSON request is below: curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\" Note: Content-Type must be application/json Below is a snip of the DVWA HTML response: <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"> <html xmlns=\"http://www.w3.org/1999/xhtml\"> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /> <title>Damn Vulnerable Web App (DVWA) - Login</title> <link rel=\"stylesheet\" type=\"text/css\" href=\"dvwa/css/login.css\" /> </head> <body> After the api-legit.sh script has run, the API learned Model will be complete. Now the model is created we can review the Tree View learned. Click on the POST Method learned, to show the \"Parameters\" learned tab: Click on the URL query parameter \"username\", to reveal the URL query parameter details Click on the Body tab to see the properties of the JSON parameters. FortiWeb ML-API learned the two JSON parameters for the URL query parameter \"username\", they are as follows: \"name\", which is a string of maxlength 6 and minlength 2 \"number\", which is a string of maxlength 2 and minlength 1 This means any API data sent to the name property must be between 2 and 6 chars, anything more or less will violate the schema and be blocked. Additionally if API data sent to the number property is is not either 1 or 2 chars long it will also violate the schema and be blocked. API View You can display the full ML-API schema details by double clicking on the POST Button for the POST Method entity \"/login.php\" The URL query parameter \"username\" is Required . This is mandatory for the schema validation. A more granular way is to use the Export button You chose the format and the path and method The differences between the formats is as follows:","title":"3. Build API Protection Model"},{"location":"fwb-machinelearning-api/#31-checking-the-model","text":"Let's check the ML-API model is valid: curl -v -X POST -d '{\"name\":\"fred\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/json\" This is a legitimate request which contains new valid JSON & URL parameters, and should not be blocked. Let's check the Attack and the Traffic logs. As the request was valid, there is no entry in the Attack Log. Within the Traffic Log, we are able to see the valid request, including both the HTTP return code 200 and the raw body of the request. Note: ML-API will only build the model with requests that return an HTTP 2xx code","title":"3.1 Checking the Model"},{"location":"fwb-machinelearning-api/#4-launch-api-attacks","text":"Launch attacks against the ML-API model. It's best to clear the Attack log after each attack, this will make it easier to see what is causing the attack to be blocked. On the Lubuntu Client or via an ssh terminal. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Copy and paste each API attack Curl command and run. Note: The Web Protection Profile being used ins \"Inline Alert Only\" Example attacks are as follows:","title":"4. Launch API Attacks"},{"location":"fwb-machinelearning-api/#411-api-body-violation","text":"\"Number\" JSON parameter is missing in JSON body. Expected result is a body violation. curl -v -X POST -d '{\"name\":\"cloe\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\"","title":"4.1.1 API Body Violation"},{"location":"fwb-machinelearning-api/#412-api-body-violation","text":"\"name\" JSON parameter is too long. Expected result, JSON parameter length violation. curl -v -X POST -d '{\"name\":\"ABCDEFGHIJ\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/json\"","title":"4.1.2 API Body Violation"},{"location":"fwb-machinelearning-api/#413-url-query-param-violation","text":"\"username\" URL query parameter is too long. Expected result is a parameter violation. curl -v -X POST -d '{\"name\":\"cloe\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=abcdefghijk -H \"Content-Type: application/json\"","title":"4.1.3 URL query param violation"},{"location":"fwb-machinelearning-api/#414-url-query-param-violation","text":"\"username\" URL query parameter is too short. Expected result is a parameter violation. curl -v -X POST -d '{\"name\":\"cloe\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=a -H \"Content-Type: application/json\"","title":"4.1.4 URL query param violation"},{"location":"fwb-machinelearning-api/#421-command-injection-in-url","text":"\"username\" URL query parameter will carry a Command Injection attack. Expected result, first signature violation (in Alert mode) and ML-API URL violation. curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='cmd.exe' -H \"Content-Type: application/json\" This attack creates two entries into the Attack log. As the Web Protection Profile is set to Inline Alert Only, this attack would've been blocked by known signatures within FortiWeb. Signatures are updated from FortiGuard Labs. The Attack has been blocked by ML-API, this is because the URL query parameter ML-API model has maxlength = 3 and the URL query parameter request is injecting 7 characters. And as such violates the schema, and is blocked.","title":"4.2.1 Command injection in URL"},{"location":"fwb-machinelearning-api/#422-command-injection-in-json","text":"\"name\" JSON parameter will carry a Command Injection attack. Expected result is a body violation. curl -v -X POST -d '{\"name\":\"cmd.exe\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='11' -H \"Content-Type: application/json\"","title":"4.2.2 Command injection in JSON"},{"location":"fwb-machinelearning-api/#423-zero-day-in-json","text":"\"name\" JSON parameter will carry a Zero Day attack. Expected result, JSON parameter violation. curl -X POST -d '{\"name\":\"fred\",\"number\":\"xx& var1=l var2=s ; \"$var1\"\"$var2\"\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/json\"","title":"4.2.3 Zero-day in JSON"},{"location":"fwb-machinelearning-api/#43-xss-in-json","text":"\"name\" JSON parameter will carry an XSS attack. Expected result, JSON body violation. curl -v -X POST -d '{\"name\":\"<script>alert(123)</script>\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='22' -H \"Content-Type: application/json\"","title":"4.3 XSS in JSON"},{"location":"fwb-machinelearning-api/#44-additional-url-parameter","text":"URL will carry \"usernameB\" as an additional URL query parameter. Expected result, additional query parameter not allowed. curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\"}' 'http://dvwa.fortinet.demo/login.php?username=11&usernameB=11B' -H \"Content-Type: application/json\"","title":"4.4 Additional URL parameter"},{"location":"fwb-machinelearning-api/#45-out-of-order-json-parameter","text":"JSON parameters will be sent in a new order. Expected result, parameter location violating the schema. curl -v -X POST -d '{\"number\u201d:\"11\",\"name\u201d:\"Rafa\"}' http://dvwa.fortinet.demo/login.php?username=111 -H \"Content-Type: application/json\" Note: ML-API was coded to respect \"propertyOrder\" JSON validation.","title":"4.5 Out of order JSON parameter"},{"location":"fwb-machinelearning-api/#46-non-json","text":"Non JSON content-type attack or deviation, will not be detected by ML-API Model. curl -v -X POST -d '{\"name\":\"ABCDEFGHIJ\",\"number\":\"12\"}' http://dvwa.fortinet.demo/login.php?username=12 -H \"Content-Type: application/xml\" Traffic log is showing FortiWeb is allowing the non JSON request.","title":"4.6 Non JSON"},{"location":"fwb-machinelearning-api/#additional-use-cases","text":"","title":"Additional Use Cases"},{"location":"fwb-machinelearning-api/#additional-json-parameter","text":"\"numberB\" additional JSON parameter will be sent. Expected result, no violation as additionalProperties JSON validation is NOT set by ML-API model. curl -v -X POST -d '{\"name\":\"john\",\"number\":\"1\",\"numberB\":\"1b\"}' http://dvwa.fortinet.demo/login.php?username=11 -H \"Content-Type: application/json\" This page is passed, without violating the API Schema, as the ML-API model is unaware of the new JSON parameter being sent.","title":"Additional JSON parameter"},{"location":"fwb-machinelearning-api/#double-blended-attack","text":"The following is an example of double blended attack inside both JSON parameter and URL query parameter. Expected result, ML-API will block the request due to URL query parameter length violation. Note: Attack log will show 4 events, the first are due to the Web Protection Profile being set to Inline Alert Only. This will show both signature and HTML Tag Based XSS Injection , none are blocked due to being in Alert mode. curl -v -X POST -d '{\"name\":\"cmd.exe\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='<script>alert(hacked)</script>' -H \"Content-Type: application/json\"","title":"Double blended attack"},{"location":"fwb-machinelearning-api/#changing-http-method","text":"The following is an example of changing the HTTP method, from a POST to a GET. Expected result, ML-API will allow the request due to not be part of the existing model. To block this request you would need to build a new ML-API model for the HTTP GET method. curl -v -X GET -d '{\"name\":\"cloe\",\"number\":\"5\"}' http://dvwa.fortinet.demo/login.php?name=11 -H \"Content-Type: application/json\" From within the Traffic log you will see FortiWeb is allowing the request","title":"Changing HTTP method"},{"location":"fwb-machinelearning-api/#recommendations","text":"","title":"Recommendations"},{"location":"fwb-machinelearning-api/#api-learning-new-method","text":"API GET requests can be generated with the api-get.sh script on the Lubuntu Client. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Start API request script ./api-get.sh Expected result as above shows the newly learned ML-API model for the GET method. The Tree View is now showing the GET method and JSON body parameters.","title":"API Learning new method"},{"location":"fwb-machinelearning-api/#restricting-api-learning-paths","text":"Note: This should be set FIRST, before traffic learning * You can create a list of paths within the application where you want ML-API to learn. * Follow the example to setup In this example, only traffic matching the path \"/upload/api\" will be learned.","title":"Restricting API learning Paths"},{"location":"fwb-machinelearning-api/#api-model-false-positive","text":"In the following example, \"name\" JSON parameter is longer than 6 characters in ML-API model, is legitimate but it violates the schema. curl -v -X POST -d '{\"name\":\"jonathon\",\"number\":\"1\"}' http://dvwa.fortinet.demo/login.php?username='11' -H \"Content-Type: application/json\" This is not an API attack but a legitimate request, however it exceeds the current maxlength for the JSON \"name\" parameter. To prevent this as a FALSE POSITIVE, you will need to relearn the API schema by sending new requests with the new maxlength. Today this is a manual process and is achieved by refreshing the ML-API policy. Just for information purposes. This workshop is now complete.","title":"API Model False Positive"},{"location":"fwb-machinelearning-basic/","text":"Demo Anomaly Detection 1. Demo Scope User registration User performs attacks (zero-day = False Negative) User performs attacks with Machine Learning active (All blocked) The user registers on the financial website. During registration he performs some attacks like Cross Site Scripting , Command Injection and SQLinjection . The Cross Site Scripting attack is blocked by signatures protection, but both the Command and SQLinjections (zero-day type attacks) go unnoticed because there are no matching signatures. Those two requests should have been blocked (False Negative). After enabling and training Machine Learning - Anomaly Detection the zero-day attacks are blocked and recorded in the Attack-Log. NOTE: You can copy & past the attack samples from the file \"AttackSamples.txt\" on the Lubuntu desktop 2. Prerequisite If you have done ML-Bot detection demo please have the bot detection action set to alert . (Machine Learning > Bot Detection > Finance > Action Settings > Action = Alert) 3. Launching Attack First attack the Finance Bank website with an attack that is protected by the old-fashioned and False Positive/False Negative (FP/FN) error prone signature based protection. Browse to http://finance.fortinet.demo/fwb/index.html on the Lubuntu client. In the next steps you will do the following registrations to demonstrate: Normal registration Attack with Cross Site Scripting (XSS) attack blocked by WAF signature Attack with \u201czero day\u201d command injection bypassing WAF signatures (FN) Attack with \u201czero day\u201d SQLinjection bypassing WAF signatures (FN) NOTE: You can cut & past the attack patterns from the AttacksSamples.txt file located on the Lubuntu Desktop. 3.1 Normal registration 3.2 Registration with XSS Registration with Cross Site Scripting attack - Blocked by WAF signature 3.3 Registration with Zero-day Registration with \u201czero day\u201d remote exploite - Bypassing WAF signatures Registration with \u201czero day\u201d SQLinjection - Bypassing WAF signatures Withough Machine Learning FortiWeb only blocked the Cross Site Scripting attack, both \u201czero day\u201d attacks passed through unnoticed (FN). 4. Enable ML - Anomaly Detection In order to have \"Machine Learing - Anomaly Detection\" protecting the finance website it needs to learn normal traffic. Login to FortiWeb Browse to Machine Learning > Anomaly Detection Double click on Finance Server Policy Edit pre-configured finance.fortinet.demo domain via hamburger menu icon. This will provide the ML-AD overview , Tree View and Parameter View info tabs. Open the Tree View To start the learning process for building the ML mathematical model (HMM), we need to generate web traffic. The requests will trigger the learning process. Web requests can be generated with the FortiDemo-ML-AD-traffic.sh script on the Lubuntu Client. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Start web request script ./FortiDemo-ML-AD-traffic.sh Enter Choice: 1 Web requests will be send to the finance website and progress is shown for each 100 web requests. ------------------------------------------------------------------------------ FortiDemo Machine Learning Anomaly Detection request generator ------------------------------------------------------------------------------ 1 - 3.000 POST requests - normal field input (learn) 2 - 3.000 POST requests - random field input (relearn) 3 - 1 POST request - XSS on Lastname field (known attack - Signatures) 4 - 1 POST request - Exploit on Lastname field (zero day command-injection attack - Machine Learning) 5 - 1 POST request - Exploit on City field (zero day SQLi attack - Machine Learning) 9 - Custom request - Send custom request method, count, data, parameter etc q - Exit Enter choice [ 1 - 9] 1 Started: Fri May 15 01:39:02 UTC 2020 Requests : 100 200 On the Tree View you can observe the \u201cCollecting \u2013 Building \u2013 Running\u201d learning stages by using the embeded Refresh button. When all parameters are in the Running stage the finance website is protected by Machine Learning \u2013 Anomaly Detection. After a few request samples (400) a mathematical model is build and switched into running mode on a parameter by parameter basis. In the background learning will continue to strengthen the model as part of deep learning. Double click on parameter firstname to display Distribution of Anomalies and Anomaly Strictness Level . Here you have the option to manually override the sample collections and perform sample testing. NOTE : At this stage Machine Learning is protecting the web application. The web request generator should still be running up to 3.000 requests. After it finished observe again the firstname parameter and notice that background learning strengthen the mathematical model. This can be observed on the Events-tab . ------------------------------------------------------------------------------- FortiDemo Machine Learning Anomaly Detection request generator ------------------------------------------------------------------------------ 1 - 3.000 POST requests - normal field input (learn) 2 - 3.000 POST requests - random field input (relearn) 3 - 1 POST request - XSS on Lastname field (known attack - Signatures) 4 - 1 POST request - Exploit on Lastname field (zero day command-injection attack - Machine Learning) 5 - 1 POST request - Exploit on City field (zero day SQLi attack - Machine Learning) 9 - Custom request - Send custom request method, count, data, parameter etc q - Exit Enter choice [ 1 - 9] 1 Started: Fri May 15 10:36:34 UTC 2020 Requests : 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 Ended : Fri May 15 10:50:31 UTC 2020 Press [Enter] key to continue... 5. Attack Finance Bank website Now the finance website is protected with Machine Learning, repeat the zero-day attacks that previsously passed through (Fales Negative) Both \"zero day\" attacks are now blocked. The attack log can be viewed to get detailed information about the attacks. This workshop is now complete.","title":"Demo - Anomaly Detection"},{"location":"fwb-machinelearning-basic/#demo-anomaly-detection","text":"","title":"Demo Anomaly Detection"},{"location":"fwb-machinelearning-basic/#1-demo-scope","text":"User registration User performs attacks (zero-day = False Negative) User performs attacks with Machine Learning active (All blocked) The user registers on the financial website. During registration he performs some attacks like Cross Site Scripting , Command Injection and SQLinjection . The Cross Site Scripting attack is blocked by signatures protection, but both the Command and SQLinjections (zero-day type attacks) go unnoticed because there are no matching signatures. Those two requests should have been blocked (False Negative). After enabling and training Machine Learning - Anomaly Detection the zero-day attacks are blocked and recorded in the Attack-Log.","title":"1. Demo Scope"},{"location":"fwb-machinelearning-basic/#2-prerequisite","text":"If you have done ML-Bot detection demo please have the bot detection action set to alert . (Machine Learning > Bot Detection > Finance > Action Settings > Action = Alert)","title":"2. Prerequisite"},{"location":"fwb-machinelearning-basic/#3-launching-attack","text":"First attack the Finance Bank website with an attack that is protected by the old-fashioned and False Positive/False Negative (FP/FN) error prone signature based protection. Browse to http://finance.fortinet.demo/fwb/index.html on the Lubuntu client. In the next steps you will do the following registrations to demonstrate: Normal registration Attack with Cross Site Scripting (XSS) attack blocked by WAF signature Attack with \u201czero day\u201d command injection bypassing WAF signatures (FN) Attack with \u201czero day\u201d SQLinjection bypassing WAF signatures (FN) NOTE: You can cut & past the attack patterns from the AttacksSamples.txt file located on the Lubuntu Desktop.","title":"3. Launching Attack"},{"location":"fwb-machinelearning-basic/#31-normal-registration","text":"","title":"3.1 Normal registration"},{"location":"fwb-machinelearning-basic/#32-registration-with-xss","text":"Registration with Cross Site Scripting attack - Blocked by WAF signature","title":"3.2 Registration with XSS"},{"location":"fwb-machinelearning-basic/#33-registration-with-zero-day","text":"Registration with \u201czero day\u201d remote exploite - Bypassing WAF signatures Registration with \u201czero day\u201d SQLinjection - Bypassing WAF signatures Withough Machine Learning FortiWeb only blocked the Cross Site Scripting attack, both \u201czero day\u201d attacks passed through unnoticed (FN).","title":"3.3 Registration with Zero-day"},{"location":"fwb-machinelearning-basic/#4-enable-ml-anomaly-detection","text":"In order to have \"Machine Learing - Anomaly Detection\" protecting the finance website it needs to learn normal traffic. Login to FortiWeb Browse to Machine Learning > Anomaly Detection Double click on Finance Server Policy Edit pre-configured finance.fortinet.demo domain via hamburger menu icon. This will provide the ML-AD overview , Tree View and Parameter View info tabs. Open the Tree View To start the learning process for building the ML mathematical model (HMM), we need to generate web traffic. The requests will trigger the learning process. Web requests can be generated with the FortiDemo-ML-AD-traffic.sh script on the Lubuntu Client. Open a terminal on Lubuntu client Start Menu > System Tools > QTerminal Start web request script ./FortiDemo-ML-AD-traffic.sh Enter Choice: 1 Web requests will be send to the finance website and progress is shown for each 100 web requests. ------------------------------------------------------------------------------ FortiDemo Machine Learning Anomaly Detection request generator ------------------------------------------------------------------------------ 1 - 3.000 POST requests - normal field input (learn) 2 - 3.000 POST requests - random field input (relearn) 3 - 1 POST request - XSS on Lastname field (known attack - Signatures) 4 - 1 POST request - Exploit on Lastname field (zero day command-injection attack - Machine Learning) 5 - 1 POST request - Exploit on City field (zero day SQLi attack - Machine Learning) 9 - Custom request - Send custom request method, count, data, parameter etc q - Exit Enter choice [ 1 - 9] 1 Started: Fri May 15 01:39:02 UTC 2020 Requests : 100 200 On the Tree View you can observe the \u201cCollecting \u2013 Building \u2013 Running\u201d learning stages by using the embeded Refresh button. When all parameters are in the Running stage the finance website is protected by Machine Learning \u2013 Anomaly Detection. After a few request samples (400) a mathematical model is build and switched into running mode on a parameter by parameter basis. In the background learning will continue to strengthen the model as part of deep learning. Double click on parameter firstname to display Distribution of Anomalies and Anomaly Strictness Level . Here you have the option to manually override the sample collections and perform sample testing. NOTE : At this stage Machine Learning is protecting the web application. The web request generator should still be running up to 3.000 requests. After it finished observe again the firstname parameter and notice that background learning strengthen the mathematical model. This can be observed on the Events-tab . ------------------------------------------------------------------------------- FortiDemo Machine Learning Anomaly Detection request generator ------------------------------------------------------------------------------ 1 - 3.000 POST requests - normal field input (learn) 2 - 3.000 POST requests - random field input (relearn) 3 - 1 POST request - XSS on Lastname field (known attack - Signatures) 4 - 1 POST request - Exploit on Lastname field (zero day command-injection attack - Machine Learning) 5 - 1 POST request - Exploit on City field (zero day SQLi attack - Machine Learning) 9 - Custom request - Send custom request method, count, data, parameter etc q - Exit Enter choice [ 1 - 9] 1 Started: Fri May 15 10:36:34 UTC 2020 Requests : 100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2100 2200 2300 2400 2500 2600 2700 2800 2900 3000 Ended : Fri May 15 10:50:31 UTC 2020 Press [Enter] key to continue...","title":"4. Enable ML - Anomaly Detection"},{"location":"fwb-machinelearning-basic/#5-attack-finance-bank-website","text":"Now the finance website is protected with Machine Learning, repeat the zero-day attacks that previsously passed through (Fales Negative) Both \"zero day\" attacks are now blocked. The attack log can be viewed to get detailed information about the attacks. This workshop is now complete.","title":"5. Attack Finance Bank website"},{"location":"fwb-machinelearning-bot-basic/","text":"Demo Bot Detection 1. Demo Scope This demo is to show the unique Machine Learning based bot detection feature and get yourself comfortable to show to partners and customers. It requires little setup to illustrate the easy of use. To reduce ML learning time we will skip sample collecting and model building phases, and move direcly into model running state by importing a pre-learned model. Download the pre-learned ML-Bot Model here . 2. Basic Configuration FortiWeb Machine Learning, both Bot Detection and Anomaly Detection , is a protection mechanism attached to the Server Policy. Policy Server Finance will be used during this exercise Policy > Server Policy > Finance > Machine Learning > Bot Detection By default Bot-Detection is not enabled and need to be configure like illustrated per instructions 1. and 2.. For this lab exercise it has been partly pre-configured . 3. Importing ML-Bot Models To speed-up the configuration we skip the automatic model learning and import the downloaded mathematical model. Policy > Server Policy > Finance > Machine Learning > Bot Detection > Import After you hvae successfully imported mathematicel model, you can configure and view the learned model together with a graphical representation. Policy > Server Policy > Finance > Machine Learning > Bot Detection > View Finish the configuration by changing the default action from Alert to Period Block . This will block detects BOTs for a period during the demo. To view the graphical representation of the imported model by selecting the Model Status tab. Hover over the line graphs to discover the traffic patterns of the imported model. 4. Enable Logging We pre-configured the log settings, so you can observe both legitimate and malicious traffic. If you are starting from scratch you can enable it with the following steps. Log&Report > Log Config > Other Log Settings: Retain Packet Payload: enable Machine Learning: enable 5. Generating & Blocking Bots Access the bWAPP web application to verify proper webservices. Open browser on Lubuntu Client and browse to http://finance.fortinet.demo/bWAPP/ Next step is to generate bot traffic. Observe the traffic log and ML-Bot detection period blocking in action. Login from your computer with your local ssh client into Lubuntu ssh -p 10100 lubuntu@<FORTIPOC-IP> (credentials: lubuntu / fortinet ), or open an QTerminal via the Start > System Tools > QTerminal. Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-26-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Execture shell script bot-simulator to launch the bot attack. ./bot-simulator.sh This will launch 5 bots sending traffic from random IP-addresses towards the bWAPP application. During the period that bot traffic is generated you can periodically browse the bWAPP application to verify bwAPP application availability. -------------------------------------------------------------------------- FortiWeb Machine Learning - Bot Detection Bot simulator -------------------------------------------------------------------------- Bot launched from: 163.197.140.244 Bot launched from: 191.254.117.72 Bot launched from: 49.174.143.26 Bot launched from: 138.57.125.248 Bot launched from: 27.4.103.138 Wait until BOTs reports to have stopped after 200 crawls Observe on the FortiWeb dashboard you will clearly see the resouce impact: High CPU load Bandwidth consumption Concurrent Connections/Sec on the Finance application Observe on Log&Report > Log Access > Traffic that bot traffic reaches the bWAPP application. After one minute approximately FortiWeb ML-Bot Detection will start blocking the bot traffic. Observe the change in resouce usage on the FortiWeb dashboard while the script is running. When the Bots are blocked, with period block due to failing Real Broweser Enforcement, the pressure on FortiWeb resources will decrease. -------------------------------------------------------------------------- FortiWeb Machine Learning - Bot Detection Bot simulator -------------------------------------------------------------------------- Bot launched from: 163.197.140.244 Bot launched from: 191.254.117.72 Bot launched from: 49.174.143.26 Bot launched from: 138.57.125.248 Bot launched from: 27.4.103.138 Wait until BOTs reports to have stopped after 200 crawls Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked <skip> Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot stopped from : 163.197.140.244 Bot stopped from : 191.254.117.72 Bot stopped from : 49.174.143.26 Bot stopped from : 138.57.125.248 Bot stopped from : 27.4.103.138 6. Observing Blocked Bots Blocked bots are listed in the Dashboard > FortiView section under Blocked IP monitoring section (add it first with + icon) and Attack Log . Feel free to release one or two bots and observe that those are not blocked anymore. 6.1 Monitor Blocked IP There is an option to manually release the blocked IP. 6.2 Attack Logs FortiWeb Attack Log shows the blocked bots triggered by Machine Learning - Bot Detection performing Bot Verification with Real Browser Validation . 6.3 FortiView Navigate through the FortiView menu to discover bot logging, especially the Security Threat map .","title":"Demo - Bot Detection"},{"location":"fwb-machinelearning-bot-basic/#demo-bot-detection","text":"","title":"Demo Bot Detection"},{"location":"fwb-machinelearning-bot-basic/#1-demo-scope","text":"This demo is to show the unique Machine Learning based bot detection feature and get yourself comfortable to show to partners and customers. It requires little setup to illustrate the easy of use. To reduce ML learning time we will skip sample collecting and model building phases, and move direcly into model running state by importing a pre-learned model. Download the pre-learned ML-Bot Model here .","title":"1. Demo Scope"},{"location":"fwb-machinelearning-bot-basic/#2-basic-configuration","text":"FortiWeb Machine Learning, both Bot Detection and Anomaly Detection , is a protection mechanism attached to the Server Policy. Policy Server Finance will be used during this exercise Policy > Server Policy > Finance > Machine Learning > Bot Detection By default Bot-Detection is not enabled and need to be configure like illustrated per instructions 1. and 2.. For this lab exercise it has been partly pre-configured .","title":"2. Basic Configuration"},{"location":"fwb-machinelearning-bot-basic/#3-importing-ml-bot-models","text":"To speed-up the configuration we skip the automatic model learning and import the downloaded mathematical model. Policy > Server Policy > Finance > Machine Learning > Bot Detection > Import After you hvae successfully imported mathematicel model, you can configure and view the learned model together with a graphical representation. Policy > Server Policy > Finance > Machine Learning > Bot Detection > View Finish the configuration by changing the default action from Alert to Period Block . This will block detects BOTs for a period during the demo. To view the graphical representation of the imported model by selecting the Model Status tab. Hover over the line graphs to discover the traffic patterns of the imported model.","title":"3. Importing ML-Bot Models"},{"location":"fwb-machinelearning-bot-basic/#4-enable-logging","text":"We pre-configured the log settings, so you can observe both legitimate and malicious traffic. If you are starting from scratch you can enable it with the following steps. Log&Report > Log Config > Other Log Settings: Retain Packet Payload: enable Machine Learning: enable","title":"4. Enable Logging"},{"location":"fwb-machinelearning-bot-basic/#5-generating-blocking-bots","text":"Access the bWAPP web application to verify proper webservices. Open browser on Lubuntu Client and browse to http://finance.fortinet.demo/bWAPP/ Next step is to generate bot traffic. Observe the traffic log and ML-Bot detection period blocking in action. Login from your computer with your local ssh client into Lubuntu ssh -p 10100 lubuntu@<FORTIPOC-IP> (credentials: lubuntu / fortinet ), or open an QTerminal via the Start > System Tools > QTerminal. Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-26-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Execture shell script bot-simulator to launch the bot attack. ./bot-simulator.sh This will launch 5 bots sending traffic from random IP-addresses towards the bWAPP application. During the period that bot traffic is generated you can periodically browse the bWAPP application to verify bwAPP application availability. -------------------------------------------------------------------------- FortiWeb Machine Learning - Bot Detection Bot simulator -------------------------------------------------------------------------- Bot launched from: 163.197.140.244 Bot launched from: 191.254.117.72 Bot launched from: 49.174.143.26 Bot launched from: 138.57.125.248 Bot launched from: 27.4.103.138 Wait until BOTs reports to have stopped after 200 crawls Observe on the FortiWeb dashboard you will clearly see the resouce impact: High CPU load Bandwidth consumption Concurrent Connections/Sec on the Finance application Observe on Log&Report > Log Access > Traffic that bot traffic reaches the bWAPP application. After one minute approximately FortiWeb ML-Bot Detection will start blocking the bot traffic. Observe the change in resouce usage on the FortiWeb dashboard while the script is running. When the Bots are blocked, with period block due to failing Real Broweser Enforcement, the pressure on FortiWeb resources will decrease. -------------------------------------------------------------------------- FortiWeb Machine Learning - Bot Detection Bot simulator -------------------------------------------------------------------------- Bot launched from: 163.197.140.244 Bot launched from: 191.254.117.72 Bot launched from: 49.174.143.26 Bot launched from: 138.57.125.248 Bot launched from: 27.4.103.138 Wait until BOTs reports to have stopped after 200 crawls Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 163.197.140.244 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked Bot 163.197.140.244 blocked Bot 49.174.143.26 blocked Bot 191.254.117.72 blocked <skip> Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot 27.4.103.138 blocked Bot 138.57.125.248 blocked Bot stopped from : 163.197.140.244 Bot stopped from : 191.254.117.72 Bot stopped from : 49.174.143.26 Bot stopped from : 138.57.125.248 Bot stopped from : 27.4.103.138","title":"5. Generating &amp; Blocking Bots"},{"location":"fwb-machinelearning-bot-basic/#6-observing-blocked-bots","text":"Blocked bots are listed in the Dashboard > FortiView section under Blocked IP monitoring section (add it first with + icon) and Attack Log . Feel free to release one or two bots and observe that those are not blocked anymore.","title":"6. Observing Blocked Bots"},{"location":"fwb-machinelearning-bot-basic/#61-monitor-blocked-ip","text":"There is an option to manually release the blocked IP.","title":"6.1 Monitor Blocked IP"},{"location":"fwb-machinelearning-bot-basic/#62-attack-logs","text":"FortiWeb Attack Log shows the blocked bots triggered by Machine Learning - Bot Detection performing Bot Verification with Real Browser Validation .","title":"6.2 Attack Logs"},{"location":"fwb-machinelearning-bot-basic/#63-fortiview","text":"Navigate through the FortiView menu to discover bot logging, especially the Security Threat map .","title":"6.3 FortiView"},{"location":"fwb-machinelearning-refresh-old/","text":"FortiWeb Machine Learning Anomaly Detection Introduction With the release of FortiWeb 6.0 machine-learning was added for Anomaly and Bot detection. This provides Machine Learning based protection against parameter tampering and bot traffic. This feature can detect and protect web services against unknown/zero-day attacks in addition to the traditional signature based detection methods. Machine Learning replaced legacy Auto Learn method with NextGen Auto Learn. Now in addition to learning the web application, it automatically protects it without adminitrative intervention. It even auto adapt to web application's changes. The anomaly detection model of machine learning feature observes the URLs, parameters of HTTP and HTTPS traffic to the web services. A mathematical models is build to detect abnormal traffic. Whether a request is legitimate or a potential malicious attack, it performs the following tasks: Collects web requests details such as URLs and parameters to build a mathematical model Matches anomalies against pre-trained threat models Detects attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the HMM (Hidden Markov Model) technique to detect anomalies, the second layer uses the SVM (Support Vector Machine) technique to determin if traffic is malicious. When the first layer (HMM) triggers a request as an anomaly, then FortiWeb will use the second layer (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models from FortiGuard. Each represents a certain attack category, such as SQL Injection , Cross-site Scripting , and so on. Each threat model is already trained based on analysis of thousands of attack samples from FortiGuard. Threat models are continuously updated using the FortiWeb Security Service. When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated. Basic Concepts FortiWeb, Fortinet\u2019s Web Application Firewall, protects your business-critical web applications from attacks that target known and unknown vulnerabilities. The attack surface of your web applications evolves rapidly, changing every time you deploy new features, update existing ones, or expose new web APIs. You need a solution that can keep up. FortiWeb is that solution. FortiWeb Machine Learning customizes the protection of each application, providing robust protection without requiring the time-consuming manual tuning required by other solutions. With Machine Learning, FortiWeb identifies anomalous behavior and, more importantly, distinguishes between malicious and benign anomalies. The solution also features robust bot mitigation capabilities, allowing benign bots to connect (e.g. search engines) while blocking malicious bot activity. Benefits In addition to regular signature updates and many other layers of defenses, FortiWeb uses Machine Learning to protect against zero-day attacks and minimize false positives. Anomaly Detection The anomaly detection model of machine learning feature observes the URLs, parameters, and HTTP Method of HTTP and/or HTTPS requests passing to your web servers. It builds mathematical models to detect abnormal traffic. Why ML - Anomaly Detection? Address Unknown Web Application Attacks. High Level View To learn about whether a request is legitimate or a potential malicious attack attempt, it performs the following tasks: Captures and collects inputs, such as URL parameters, to build a mathematical model of allowed access Observes the HTTP method of the traffic Matches anomalies against pre-trained threat models Detect and prevent attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the Hidden Markov Model (HMM) and monitors access to the application and collects data to build a mathematical model behind every parameter and HTTP method. Once completed, it will verify every request against the model to determine whether it's an anomaly or not. Once the first layer of machine learning triggers a request as an anomaly, FortiWeb will use the second layer of machine learning Support Vector Machine (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models. Each represents a certain attack category, such as SQL Injection, Cross-site Scripting, and so on. Each threat model is already trained based on analysis of thousands of attack samples. Threat models are continuously updated using the FortiWeb Security Service . When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated. Build Anomaly Detection Model Details: How FortiWeb Machine Learning Builds Anomaly Detection Model Phase 1 Collecting Samples Machine Learning requires at least 400 unique inputs samples (Fast Mode, learning continues to replace with stronger models) Building Anomaly Detection (AD) model + variance Switch it in Running mode to enable protection Phase 2 Scoring Results Phase 3 Tuning Deviation Tuning of the Standard Deviation (sigma) if needed for Anomaly Strictness Actual Graph Sample Verify Anomaly Detection Model Details: Verifying Anomaly with SVM Threat Model How to read the graph Once Anomaly been detected, FortiWeb will hand it over to Support Vactor Machine(SVM) layer SVM Threat Model Pattern Vectorization : converting the pattern into a vector by using a word dictionary Pattern example : <img src = \u2018x\u2019 onerror = javascript:alert(1)> img > HTML Label = index2 + weight2 < > = \u2018 ( ) > special characters = index1 + weight0.5 src > HTML Attribute = index3 + weight1 onerror > HTML Event= index4 + weight2 alert > > HTML Function= index5 + weight1 Final Vector : 1:0,5 2:2 3:1 4:2 5:1 Pattern Vector Mitigation by SVM Threat Model SVM Threat Models are continuously updated and pushed from FortiGuard One SVM per family : SQLi, XSS, Command Injection, Code Injection, LFI/ RFI, Common Injection and Remote Exploits SVM detects FPs and FNs SVM vectors are provided by ForitGuard for on-box detection and as such there is no performance impact on FortiWeb SVM can allow the pattern (if no match svm model) or block it (if matches svm model) Ex : abc_123 > not detected as anomaly; no need to check it on SVM Ex : abc_123 > detected as anomaly but not matching SVM attack Ex : or '1'='1' > detected as anomaly and matching SVM SQLi Attack Detection model with SVM engines Detect and adapt to changes Details: Detecting and Adapting to Application changes Automatically If a parameter change is detected the status will automatically go into Samples Collection and build an updated model (merge) NOTE: Maching Learning - Anomaly Detection is per paramater. The process is done for each parameter individually. Machine Learning Benefits Summary: FortiWeb Machine Learning for protecting Application Benefits Completely automatic Near False Positives Free Near False Negatives Free Follows parameter changes Knowledge refresh is now complete, you can go back to the Workshop challenge Online Admin Guide on ML-Anomaly Detection is available here Bot Detection Introduction FortiWeb applies AI-based bot detection to block malicious bot activity without blocking bots that support legitimate business needs, such as search engines, or health and performance monitoring tools. FortiWeb offers AI-based Machine Learning - Bot Detection that complements the Bot Mitigation and DoS based protection functions. With this Machine Learning-based capability, you can deploy FortiWeb to detect sophisticated bots that can otherwise go undetected. FortiWeb Machine Learning for Bot Detection can detect bot-like traffic from the scraper, web vulnerability scanner, crawler, Dos tools, and so on. It observes user behavior from thirteen dimensions to validate if requests are initiated by a human (browsing) or not. Validation is for example done on how many HTTP-requests are initiated by the user, whether the request use illegal HTTP versions, type of browser agent, valid referrers, whether it fetches JSON/XML resources to name a few. The benefit to the traditional mechanisms to detect bots, the bot detection model saves you the trouble to experiment on an appropriate threshold to detect abnormal user behaviors. For example, how would you estimate how many initiated HTTP-requests should be considered as abnormal? With the traditional mechanism, you may need to experiment on different threshold values and continuously check the attack log until no related attacks (False Positives) are reported for regular traffic. FortiWeb Machne Learning uses SVM (Support Vector Machine) algorithm to build up the bot detection model which is self-learned from traffic patterns of regular clients. New client HTTP-requests are compared against that of the regular clients based on the mathimatical model created. If requests of a particular client don't match over the configured periode (anomaly), than FortiWeb will classify that client as a bot. When the traffic patterns of the regular clients vary dramatically (e.g. the functions of your application have changed leading to different behavior), FortiWeb automatically refreshes the bot detection model to adapt to the changes. Basic Concepts The bot detection model has three stages: sample collecting , model building , and model running . Sample Collecting To build up a bot detection model, the system collects samples (also called vector) of users' behaviors when they are visiting your application. Each sample records a certain user's behaviors in a certain time range. The samples are split into two parts. Three quarters of the samples are divided into training sample set. One quarter of the samples are divided into testing sample set. Model Building During the model building stage, the system observes the training samples to self-learn user behavior profiles and builds up mathematical models using the SVM (Support Vector Machine) algorithm. The SVM parameters are used to eliminate rogue training samples and control individual sample influence on the overall result. Multiple models are built based on different parameter combinations in the SVM algorithm. According to the training accuracy, cross-validation value, testing accuracy, and the model type you have configured, the system narrows down the selection to one model and uses it as the bot detection model. Model Running When the bot detection model is in running state, the system compares users' behaviors against the bot detection model. If the traffic from a certain user doesn't match the model, the system will record the traffic as an anomaly. If a certain times of anomalies are recorded for this user, the system will take actions such as sending alert emails or blocking the traffic from this user. It's possible that sometimes the traffic is false positively detected as an anomaly. The system uses Bot Confirmation to confirm whether an anomaly is indeed a bot. If the false positive detection occurs so many times that it exceeds a certain threshold, the system considers the current bot detection model invalid, and automatically updates the model. Benefits Completely Automatic Near False Positives Free Near False Negatives Free Online Admin Guide on ML-Bot Detection is available here","title":"Fwb machinelearning refresh old"},{"location":"fwb-machinelearning-refresh-old/#fortiweb-machine-learning","text":"","title":"FortiWeb Machine Learning"},{"location":"fwb-machinelearning-refresh-old/#anomaly-detection","text":"","title":"Anomaly Detection"},{"location":"fwb-machinelearning-refresh-old/#introduction","text":"With the release of FortiWeb 6.0 machine-learning was added for Anomaly and Bot detection. This provides Machine Learning based protection against parameter tampering and bot traffic. This feature can detect and protect web services against unknown/zero-day attacks in addition to the traditional signature based detection methods. Machine Learning replaced legacy Auto Learn method with NextGen Auto Learn. Now in addition to learning the web application, it automatically protects it without adminitrative intervention. It even auto adapt to web application's changes. The anomaly detection model of machine learning feature observes the URLs, parameters of HTTP and HTTPS traffic to the web services. A mathematical models is build to detect abnormal traffic. Whether a request is legitimate or a potential malicious attack, it performs the following tasks: Collects web requests details such as URLs and parameters to build a mathematical model Matches anomalies against pre-trained threat models Detects attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the HMM (Hidden Markov Model) technique to detect anomalies, the second layer uses the SVM (Support Vector Machine) technique to determin if traffic is malicious. When the first layer (HMM) triggers a request as an anomaly, then FortiWeb will use the second layer (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models from FortiGuard. Each represents a certain attack category, such as SQL Injection , Cross-site Scripting , and so on. Each threat model is already trained based on analysis of thousands of attack samples from FortiGuard. Threat models are continuously updated using the FortiWeb Security Service. When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated.","title":"Introduction"},{"location":"fwb-machinelearning-refresh-old/#basic-concepts","text":"FortiWeb, Fortinet\u2019s Web Application Firewall, protects your business-critical web applications from attacks that target known and unknown vulnerabilities. The attack surface of your web applications evolves rapidly, changing every time you deploy new features, update existing ones, or expose new web APIs. You need a solution that can keep up. FortiWeb is that solution. FortiWeb Machine Learning customizes the protection of each application, providing robust protection without requiring the time-consuming manual tuning required by other solutions. With Machine Learning, FortiWeb identifies anomalous behavior and, more importantly, distinguishes between malicious and benign anomalies. The solution also features robust bot mitigation capabilities, allowing benign bots to connect (e.g. search engines) while blocking malicious bot activity.","title":"Basic Concepts"},{"location":"fwb-machinelearning-refresh-old/#benefits","text":"In addition to regular signature updates and many other layers of defenses, FortiWeb uses Machine Learning to protect against zero-day attacks and minimize false positives.","title":"Benefits"},{"location":"fwb-machinelearning-refresh-old/#anomaly-detection_1","text":"The anomaly detection model of machine learning feature observes the URLs, parameters, and HTTP Method of HTTP and/or HTTPS requests passing to your web servers. It builds mathematical models to detect abnormal traffic.","title":"Anomaly Detection"},{"location":"fwb-machinelearning-refresh-old/#why-ml-anomaly-detection","text":"Address Unknown Web Application Attacks.","title":"Why ML - Anomaly Detection?"},{"location":"fwb-machinelearning-refresh-old/#high-level-view","text":"To learn about whether a request is legitimate or a potential malicious attack attempt, it performs the following tasks: Captures and collects inputs, such as URL parameters, to build a mathematical model of allowed access Observes the HTTP method of the traffic Matches anomalies against pre-trained threat models Detect and prevent attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the Hidden Markov Model (HMM) and monitors access to the application and collects data to build a mathematical model behind every parameter and HTTP method. Once completed, it will verify every request against the model to determine whether it's an anomaly or not. Once the first layer of machine learning triggers a request as an anomaly, FortiWeb will use the second layer of machine learning Support Vector Machine (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models. Each represents a certain attack category, such as SQL Injection, Cross-site Scripting, and so on. Each threat model is already trained based on analysis of thousands of attack samples. Threat models are continuously updated using the FortiWeb Security Service . When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated.","title":"High Level View"},{"location":"fwb-machinelearning-refresh-old/#build-anomaly-detection-model","text":"Details: How FortiWeb Machine Learning Builds Anomaly Detection Model","title":"Build Anomaly Detection Model"},{"location":"fwb-machinelearning-refresh-old/#phase-1-collecting-samples","text":"Machine Learning requires at least 400 unique inputs samples (Fast Mode, learning continues to replace with stronger models) Building Anomaly Detection (AD) model + variance Switch it in Running mode to enable protection","title":"Phase 1 Collecting Samples"},{"location":"fwb-machinelearning-refresh-old/#phase-2-scoring-results","text":"","title":"Phase 2 Scoring Results"},{"location":"fwb-machinelearning-refresh-old/#phase-3-tuning-deviation","text":"Tuning of the Standard Deviation (sigma) if needed for Anomaly Strictness Actual Graph Sample","title":"Phase 3 Tuning Deviation"},{"location":"fwb-machinelearning-refresh-old/#verify-anomaly-detection-model","text":"Details: Verifying Anomaly with SVM Threat Model How to read the graph Once Anomaly been detected, FortiWeb will hand it over to Support Vactor Machine(SVM) layer SVM Threat Model Pattern Vectorization : converting the pattern into a vector by using a word dictionary Pattern example : <img src = \u2018x\u2019 onerror = javascript:alert(1)> img > HTML Label = index2 + weight2 < > = \u2018 ( ) > special characters = index1 + weight0.5 src > HTML Attribute = index3 + weight1 onerror > HTML Event= index4 + weight2 alert > > HTML Function= index5 + weight1 Final Vector : 1:0,5 2:2 3:1 4:2 5:1 Pattern Vector Mitigation by SVM Threat Model SVM Threat Models are continuously updated and pushed from FortiGuard One SVM per family : SQLi, XSS, Command Injection, Code Injection, LFI/ RFI, Common Injection and Remote Exploits SVM detects FPs and FNs SVM vectors are provided by ForitGuard for on-box detection and as such there is no performance impact on FortiWeb SVM can allow the pattern (if no match svm model) or block it (if matches svm model) Ex : abc_123 > not detected as anomaly; no need to check it on SVM Ex : abc_123 > detected as anomaly but not matching SVM attack Ex : or '1'='1' > detected as anomaly and matching SVM SQLi Attack Detection model with SVM engines","title":"Verify Anomaly Detection Model"},{"location":"fwb-machinelearning-refresh-old/#detect-and-adapt-to-changes","text":"Details: Detecting and Adapting to Application changes Automatically If a parameter change is detected the status will automatically go into Samples Collection and build an updated model (merge) NOTE: Maching Learning - Anomaly Detection is per paramater. The process is done for each parameter individually.","title":"Detect and adapt to changes"},{"location":"fwb-machinelearning-refresh-old/#machine-learning-benefits","text":"Summary: FortiWeb Machine Learning for protecting Application Benefits Completely automatic Near False Positives Free Near False Negatives Free Follows parameter changes Knowledge refresh is now complete, you can go back to the Workshop challenge Online Admin Guide on ML-Anomaly Detection is available here","title":"Machine Learning Benefits"},{"location":"fwb-machinelearning-refresh-old/#bot-detection","text":"","title":"Bot Detection"},{"location":"fwb-machinelearning-refresh-old/#introduction_1","text":"FortiWeb applies AI-based bot detection to block malicious bot activity without blocking bots that support legitimate business needs, such as search engines, or health and performance monitoring tools. FortiWeb offers AI-based Machine Learning - Bot Detection that complements the Bot Mitigation and DoS based protection functions. With this Machine Learning-based capability, you can deploy FortiWeb to detect sophisticated bots that can otherwise go undetected. FortiWeb Machine Learning for Bot Detection can detect bot-like traffic from the scraper, web vulnerability scanner, crawler, Dos tools, and so on. It observes user behavior from thirteen dimensions to validate if requests are initiated by a human (browsing) or not. Validation is for example done on how many HTTP-requests are initiated by the user, whether the request use illegal HTTP versions, type of browser agent, valid referrers, whether it fetches JSON/XML resources to name a few. The benefit to the traditional mechanisms to detect bots, the bot detection model saves you the trouble to experiment on an appropriate threshold to detect abnormal user behaviors. For example, how would you estimate how many initiated HTTP-requests should be considered as abnormal? With the traditional mechanism, you may need to experiment on different threshold values and continuously check the attack log until no related attacks (False Positives) are reported for regular traffic. FortiWeb Machne Learning uses SVM (Support Vector Machine) algorithm to build up the bot detection model which is self-learned from traffic patterns of regular clients. New client HTTP-requests are compared against that of the regular clients based on the mathimatical model created. If requests of a particular client don't match over the configured periode (anomaly), than FortiWeb will classify that client as a bot. When the traffic patterns of the regular clients vary dramatically (e.g. the functions of your application have changed leading to different behavior), FortiWeb automatically refreshes the bot detection model to adapt to the changes.","title":"Introduction"},{"location":"fwb-machinelearning-refresh-old/#basic-concepts_1","text":"The bot detection model has three stages: sample collecting , model building , and model running . Sample Collecting To build up a bot detection model, the system collects samples (also called vector) of users' behaviors when they are visiting your application. Each sample records a certain user's behaviors in a certain time range. The samples are split into two parts. Three quarters of the samples are divided into training sample set. One quarter of the samples are divided into testing sample set. Model Building During the model building stage, the system observes the training samples to self-learn user behavior profiles and builds up mathematical models using the SVM (Support Vector Machine) algorithm. The SVM parameters are used to eliminate rogue training samples and control individual sample influence on the overall result. Multiple models are built based on different parameter combinations in the SVM algorithm. According to the training accuracy, cross-validation value, testing accuracy, and the model type you have configured, the system narrows down the selection to one model and uses it as the bot detection model. Model Running When the bot detection model is in running state, the system compares users' behaviors against the bot detection model. If the traffic from a certain user doesn't match the model, the system will record the traffic as an anomaly. If a certain times of anomalies are recorded for this user, the system will take actions such as sending alert emails or blocking the traffic from this user. It's possible that sometimes the traffic is false positively detected as an anomaly. The system uses Bot Confirmation to confirm whether an anomaly is indeed a bot. If the false positive detection occurs so many times that it exceeds a certain threshold, the system considers the current bot detection model invalid, and automatically updates the model.","title":"Basic Concepts"},{"location":"fwb-machinelearning-refresh-old/#benefits_1","text":"Completely Automatic Near False Positives Free Near False Negatives Free Online Admin Guide on ML-Bot Detection is available here","title":"Benefits"},{"location":"fwb-machinelearning-refresh/","text":"FortiWeb Machine Learning Anomaly Detection Introduction Machine Learning for Anomaly Detection based protects against parameter tampering. This feature can detect and protect web services against unknown/zero-day attacks in addition to the traditional signature based detection methods. This compliments the existing mitigation tools such as signatures, parameter validation etc. Machine Learning replaced legacy Auto Learn method with NextGen Auto Learn. Now in addition to learning the web application, it automatically protects it without adminitrative intervention. It even auto adapt to web application's changes. The anomaly detection model of machine learning feature observes the URLs, parameters of HTTP and HTTPS traffic to the web services. A mathematical models is build to detect abnormal traffic. Whether a request is legitimate or a potential malicious attack, it performs the following tasks: Collects web requests details such as URLs and parameters to build a mathematical model Matches anomalies against pre-trained threat models Detects attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the HMM (Hidden Markov Model) technique to detect anomalies, the second layer uses the SVM (Support Vector Machine) technique to determin if traffic is malicious. When the first layer (HMM) triggers a request as an anomaly, then FortiWeb will use the second layer (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models from FortiGuard. Each represents a certain attack category, such as SQL Injection , Cross-site Scripting , and so on. Each threat model is already trained based on analysis of thousands of attack samples from FortiGuard. Threat models are continuously updated using the FortiWeb Security Service. When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated. Basic Concepts FortiWeb, Fortinet\u2019s Web Application Firewall, protects your business-critical web applications from attacks that target known and unknown vulnerabilities. The attack surface of your web applications evolves rapidly, changing every time you deploy new features, update existing ones, or expose new web APIs. You need a solution that can keep up. FortiWeb is that solution. FortiWeb Machine Learning customizes the protection of each application, providing robust protection without requiring the time-consuming manual tuning required by other solutions. With Machine Learning, FortiWeb identifies anomalous behavior and, more importantly, distinguishes between malicious and benign anomalies. The solution also features robust bot mitigation capabilities, allowing benign bots to connect (e.g. search engines) while blocking malicious bot activity. Benefits In addition to regular signature updates and many other layers of defenses, FortiWeb uses Machine Learning to protect against zero-day attacks and minimize false positives. Anomaly Detection The anomaly detection model of machine learning feature observes the URLs, parameters, and HTTP Method of HTTP and/or HTTPS requests passing to your web servers. It builds mathematical models to detect abnormal traffic. Why ML - Anomaly Detection? Address Unknown Web Application Attacks. High Level View To learn about whether a request is legitimate or a potential malicious attack attempt, it performs the following tasks: Captures and collects inputs, such as URL parameters, to build a mathematical model of allowed access Observes the HTTP method of the traffic Matches anomalies against pre-trained threat models Detect and prevent attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the Hidden Markov Model (HMM) and monitors access to the application and collects data to build a mathematical model behind every parameter and HTTP method. Once completed, it will verify every request against the model to determine whether it's an anomaly or not. Once the first layer of machine learning triggers a request as an anomaly, FortiWeb will use the second layer of machine learning Support Vector Machine (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models. Each represents a certain attack category, such as SQL Injection, Cross-site Scripting, and so on. Each threat model is already trained based on analysis of thousands of attack samples. Threat models are continuously updated using the FortiWeb Security Service . When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated. Build Anomaly Detection Model Details: How FortiWeb Machine Learning Builds Anomaly Detection Model Phase 1 Collecting Samples Machine Learning requires at least 400 unique inputs samples (Fast Mode, learning continues to replace with stronger models) Building Anomaly Detection (AD) model + variance Switch it in Running mode to enable protection Phase 2 Scoring Results Phase 3 Tuning Deviation Tuning of the Standard Deviation (sigma) if needed for Anomaly Strictness Actual Graph Sample Verify Anomaly Detection Model Details: Verifying Anomaly with SVM Threat Model How to read the graph Once Anomaly been detected, FortiWeb will hand it over to Support Vactor Machine(SVM) layer SVM Threat Model Pattern Vectorization : converting the pattern into a vector by using a word dictionary Pattern example : <img src = \u2018x\u2019 onerror = javascript:alert(1)> img > HTML Label = index2 + weight2 < > = \u2018 ( ) > special characters = index1 + weight0.5 src > HTML Attribute = index3 + weight1 onerror > HTML Event= index4 + weight2 alert > > HTML Function= index5 + weight1 Final Vector : 1:0,5 2:2 3:1 4:2 5:1 Pattern Vector Mitigation by SVM Threat Model SVM Threat Models are continuously updated and pushed from FortiGuard One SVM per family : SQLi, XSS, Command Injection, Code Injection, LFI/ RFI, Common Injection and Remote Exploits SVM detects FPs and FNs SVM vectors are provided by ForitGuard for on-box detection and as such there is no performance impact on FortiWeb SVM can allow the pattern (if no match svm model) or block it (if matches svm model) Ex : abc_123 > not detected as anomaly; no need to check it on SVM Ex : abc_123 > detected as anomaly but not matching SVM attack Ex : or '1'='1' > detected as anomaly and matching SVM SQLi Attack Detection model with SVM engines Detect and adapt to changes Details: Detecting and Adapting to Application changes Automatically If a parameter change is detected the status will automatically go into Samples Collection and build an updated model (merge) NOTE: Maching Learning - Anomaly Detection is per paramater. The process is done for each parameter individually. Machine Learning Benefits Summary: FortiWeb Machine Learning for protecting Application Benefits Completely automatic Near False Positives Free Near False Negatives Free Follows parameter changes Knowledge refresh is now complete, you can go back to the Workshop challenge Online Admin Guide on ML-Anomaly Detection is available here Bot Detection Introduction FortiWeb applies AI-based bot detection to block malicious bot activity without blocking bots that support legitimate business needs, such as search engines, or health and performance monitoring tools. FortiWeb offers AI-based Machine Learning - Bot Detection that complements the Bot Mitigation and DoS based protection functions. With this Machine Learning-based capability, you can deploy FortiWeb to detect sophisticated bots that can otherwise go undetected. FortiWeb Machine Learning for Bot Detection can detect bot-like traffic from the scraper, web vulnerability scanner, crawler, Dos tools, and so on. It observes user behavior from thirteen dimensions to validate if requests are initiated by a human (browsing) or not. Validation is for example done on how many HTTP-requests are initiated by the user, whether the request use illegal HTTP versions, type of browser agent, valid referrers, whether it fetches JSON/XML resources to name a few. The benefit to the traditional mechanisms to detect bots, the bot detection model saves you the trouble to experiment on an appropriate threshold to detect abnormal user behaviors. For example, how would you estimate how many initiated HTTP-requests should be considered as abnormal? With the traditional mechanism, you may need to experiment on different threshold values and continuously check the attack log until no related attacks (False Positives) are reported for regular traffic. FortiWeb Machne Learning uses SVM (Support Vector Machine) algorithm to build up the bot detection model which is self-learned from traffic patterns of regular clients. New client HTTP-requests are compared against that of the regular clients based on the mathimatical model created. If requests of a particular client don't match over the configured periode (anomaly), than FortiWeb will classify that client as a bot. When the traffic patterns of the regular clients vary dramatically (e.g. the functions of your application have changed leading to different behavior), FortiWeb automatically refreshes the bot detection model to adapt to the changes. Basic Concepts The bot detection model has three stages: sample collecting , model building , and model running . Sample Collecting To build up a bot detection model, the system collects samples (also called vector) of users' behaviors when they are visiting your application. Each sample records a certain user's behaviors in a certain time range. The samples are split into two parts. Three quarters of the samples are divided into training sample set. One quarter of the samples are divided into testing sample set. Model Building During the model building stage, the system observes the training samples to self-learn user behavior profiles and builds up mathematical models using the SVM (Support Vector Machine) algorithm. The SVM parameters are used to eliminate rogue training samples and control individual sample influence on the overall result. Multiple models are built based on different parameter combinations in the SVM algorithm. According to the training accuracy, cross-validation value, testing accuracy, and the model type you have configured, the system narrows down the selection to one model and uses it as the bot detection model. Model Running When the bot detection model is in running state, the system compares users' behaviors against the bot detection model. If the traffic from a certain user doesn't match the model, the system will record the traffic as an anomaly. If a certain times of anomalies are recorded for this user, the system will take actions such as sending alert emails or blocking the traffic from this user. It's possible that sometimes the traffic is false positively detected as an anomaly. The system uses Bot Confirmation to confirm whether an anomaly is indeed a bot. If the false positive detection occurs so many times that it exceeds a certain threshold, the system considers the current bot detection model invalid, and automatically updates the model. Benefits Completely Automatic Near False Positives Free Near False Negatives Free Online Admin Guide on ML-Bot Detection is available here API Protection Introduction With the release of FortiWEB v7.0, API Protection (Machine Learning) was released. This compliments the exiting 5 API protection methods including JSON, XML, OpenAPI, API Gateeway and Mobile API. The machine learning based API Protection learns the REST API data structure from user traffic samples and then build a mathematical model to screen out malicious API requests. It analyzes the method, URL, and endpoint data of the API request samples to generate an API data structure file for your application. This file describes the URL pattern and schema of endpoint data. If the incoming API request violates the data structure, it will be detected as an attack. API Protection supports JSON request body or responses. API Discovery A successful REST API sample (request & response) must follow the server\u2019s API specification API discovery: restore the API specification from user traffic by profiling API samples. One key step in API discovery is to determine whether multiple API samples belong to the same API. The API discovery problem can be formulated as an unsupervised learning problem which can be solved by clustering algorithms. We designed a new clustering algorithm, URL clustering with schema awareness, to solve the problem. The algorithm can be considered as a variant of the well-known leader clustering algorithm. Clustering is often used as a data analysis technique for discovering interesting patterns in data, such as grouping customers based on their behaviour. API - 10 Dimensions examined URL distance Generalized Hamming distance for vectorized URLs Path parameters Schema of parameters in URL path Query parameters Schema of parameters appended to the URL. Header parameters Schema of parameters in custom headers Cookie parameters Schema of cookie values HTTP request body Schema of HTTP request body HTTP method Type of HTTP methods, eg., GET, SET, PUT, POST... Media type Type of media type, e.g., XML, JSON, etc. HTTP status code Only successful requests shall be used for model training HTTP response body Schema of response body Architecture and Components High Level Architecture and System Components Preprocessing module: extract user data schema, construct API samples Inference module: evaluate the API samples with pre-trained machine learning models, feed sample outliers to the model training module, generate security scores for API samples Model training module: train ML models using our API profiling algorithm and send updates to the inference module API protection module: determine following actions based on security scores and user API protection policies. Benefits API discovery will \u201cprofile\u201d the REST APIs from user traffic. By learning and build the specification of changing APIs, machine learning will identify: Ambiguity in URL pattern Ambiguity in Schema","title":"Info - Machine Learning"},{"location":"fwb-machinelearning-refresh/#fortiweb-machine-learning","text":"","title":"FortiWeb Machine Learning"},{"location":"fwb-machinelearning-refresh/#anomaly-detection","text":"","title":"Anomaly Detection"},{"location":"fwb-machinelearning-refresh/#introduction","text":"Machine Learning for Anomaly Detection based protects against parameter tampering. This feature can detect and protect web services against unknown/zero-day attacks in addition to the traditional signature based detection methods. This compliments the existing mitigation tools such as signatures, parameter validation etc. Machine Learning replaced legacy Auto Learn method with NextGen Auto Learn. Now in addition to learning the web application, it automatically protects it without adminitrative intervention. It even auto adapt to web application's changes. The anomaly detection model of machine learning feature observes the URLs, parameters of HTTP and HTTPS traffic to the web services. A mathematical models is build to detect abnormal traffic. Whether a request is legitimate or a potential malicious attack, it performs the following tasks: Collects web requests details such as URLs and parameters to build a mathematical model Matches anomalies against pre-trained threat models Detects attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the HMM (Hidden Markov Model) technique to detect anomalies, the second layer uses the SVM (Support Vector Machine) technique to determin if traffic is malicious. When the first layer (HMM) triggers a request as an anomaly, then FortiWeb will use the second layer (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models from FortiGuard. Each represents a certain attack category, such as SQL Injection , Cross-site Scripting , and so on. Each threat model is already trained based on analysis of thousands of attack samples from FortiGuard. Threat models are continuously updated using the FortiWeb Security Service. When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated.","title":"Introduction"},{"location":"fwb-machinelearning-refresh/#basic-concepts","text":"FortiWeb, Fortinet\u2019s Web Application Firewall, protects your business-critical web applications from attacks that target known and unknown vulnerabilities. The attack surface of your web applications evolves rapidly, changing every time you deploy new features, update existing ones, or expose new web APIs. You need a solution that can keep up. FortiWeb is that solution. FortiWeb Machine Learning customizes the protection of each application, providing robust protection without requiring the time-consuming manual tuning required by other solutions. With Machine Learning, FortiWeb identifies anomalous behavior and, more importantly, distinguishes between malicious and benign anomalies. The solution also features robust bot mitigation capabilities, allowing benign bots to connect (e.g. search engines) while blocking malicious bot activity.","title":"Basic Concepts"},{"location":"fwb-machinelearning-refresh/#benefits","text":"In addition to regular signature updates and many other layers of defenses, FortiWeb uses Machine Learning to protect against zero-day attacks and minimize false positives.","title":"Benefits"},{"location":"fwb-machinelearning-refresh/#anomaly-detection_1","text":"The anomaly detection model of machine learning feature observes the URLs, parameters, and HTTP Method of HTTP and/or HTTPS requests passing to your web servers. It builds mathematical models to detect abnormal traffic.","title":"Anomaly Detection"},{"location":"fwb-machinelearning-refresh/#why-ml-anomaly-detection","text":"Address Unknown Web Application Attacks.","title":"Why ML - Anomaly Detection?"},{"location":"fwb-machinelearning-refresh/#high-level-view","text":"To learn about whether a request is legitimate or a potential malicious attack attempt, it performs the following tasks: Captures and collects inputs, such as URL parameters, to build a mathematical model of allowed access Observes the HTTP method of the traffic Matches anomalies against pre-trained threat models Detect and prevent attacks FortiWeb employs two layers of machine learning to detect malicious attacks. The first layer uses the Hidden Markov Model (HMM) and monitors access to the application and collects data to build a mathematical model behind every parameter and HTTP method. Once completed, it will verify every request against the model to determine whether it's an anomaly or not. Once the first layer of machine learning triggers a request as an anomaly, FortiWeb will use the second layer of machine learning Support Vector Machine (SVM) to verify whether it's a real attack or just a benign anomaly that should be ignored. To do so, FortiWeb includes pre-built trained threat models. Each represents a certain attack category, such as SQL Injection, Cross-site Scripting, and so on. Each threat model is already trained based on analysis of thousands of attack samples. Threat models are continuously updated using the FortiWeb Security Service . When new attack types are released, the FortiGuard team analyzes the new threats and re-trains the relevant threat model. The new threat model is then pushed to all customer installations in a way similar to how signatures are updated.","title":"High Level View"},{"location":"fwb-machinelearning-refresh/#build-anomaly-detection-model","text":"Details: How FortiWeb Machine Learning Builds Anomaly Detection Model","title":"Build Anomaly Detection Model"},{"location":"fwb-machinelearning-refresh/#phase-1-collecting-samples","text":"Machine Learning requires at least 400 unique inputs samples (Fast Mode, learning continues to replace with stronger models) Building Anomaly Detection (AD) model + variance Switch it in Running mode to enable protection","title":"Phase 1 Collecting Samples"},{"location":"fwb-machinelearning-refresh/#phase-2-scoring-results","text":"","title":"Phase 2 Scoring Results"},{"location":"fwb-machinelearning-refresh/#phase-3-tuning-deviation","text":"Tuning of the Standard Deviation (sigma) if needed for Anomaly Strictness Actual Graph Sample","title":"Phase 3 Tuning Deviation"},{"location":"fwb-machinelearning-refresh/#verify-anomaly-detection-model","text":"Details: Verifying Anomaly with SVM Threat Model How to read the graph Once Anomaly been detected, FortiWeb will hand it over to Support Vactor Machine(SVM) layer SVM Threat Model Pattern Vectorization : converting the pattern into a vector by using a word dictionary Pattern example : <img src = \u2018x\u2019 onerror = javascript:alert(1)> img > HTML Label = index2 + weight2 < > = \u2018 ( ) > special characters = index1 + weight0.5 src > HTML Attribute = index3 + weight1 onerror > HTML Event= index4 + weight2 alert > > HTML Function= index5 + weight1 Final Vector : 1:0,5 2:2 3:1 4:2 5:1 Pattern Vector Mitigation by SVM Threat Model SVM Threat Models are continuously updated and pushed from FortiGuard One SVM per family : SQLi, XSS, Command Injection, Code Injection, LFI/ RFI, Common Injection and Remote Exploits SVM detects FPs and FNs SVM vectors are provided by ForitGuard for on-box detection and as such there is no performance impact on FortiWeb SVM can allow the pattern (if no match svm model) or block it (if matches svm model) Ex : abc_123 > not detected as anomaly; no need to check it on SVM Ex : abc_123 > detected as anomaly but not matching SVM attack Ex : or '1'='1' > detected as anomaly and matching SVM SQLi Attack Detection model with SVM engines","title":"Verify Anomaly Detection Model"},{"location":"fwb-machinelearning-refresh/#detect-and-adapt-to-changes","text":"Details: Detecting and Adapting to Application changes Automatically If a parameter change is detected the status will automatically go into Samples Collection and build an updated model (merge) NOTE: Maching Learning - Anomaly Detection is per paramater. The process is done for each parameter individually.","title":"Detect and adapt to changes"},{"location":"fwb-machinelearning-refresh/#machine-learning-benefits","text":"Summary: FortiWeb Machine Learning for protecting Application Benefits Completely automatic Near False Positives Free Near False Negatives Free Follows parameter changes Knowledge refresh is now complete, you can go back to the Workshop challenge Online Admin Guide on ML-Anomaly Detection is available here","title":"Machine Learning Benefits"},{"location":"fwb-machinelearning-refresh/#bot-detection","text":"","title":"Bot Detection"},{"location":"fwb-machinelearning-refresh/#introduction_1","text":"FortiWeb applies AI-based bot detection to block malicious bot activity without blocking bots that support legitimate business needs, such as search engines, or health and performance monitoring tools. FortiWeb offers AI-based Machine Learning - Bot Detection that complements the Bot Mitigation and DoS based protection functions. With this Machine Learning-based capability, you can deploy FortiWeb to detect sophisticated bots that can otherwise go undetected. FortiWeb Machine Learning for Bot Detection can detect bot-like traffic from the scraper, web vulnerability scanner, crawler, Dos tools, and so on. It observes user behavior from thirteen dimensions to validate if requests are initiated by a human (browsing) or not. Validation is for example done on how many HTTP-requests are initiated by the user, whether the request use illegal HTTP versions, type of browser agent, valid referrers, whether it fetches JSON/XML resources to name a few. The benefit to the traditional mechanisms to detect bots, the bot detection model saves you the trouble to experiment on an appropriate threshold to detect abnormal user behaviors. For example, how would you estimate how many initiated HTTP-requests should be considered as abnormal? With the traditional mechanism, you may need to experiment on different threshold values and continuously check the attack log until no related attacks (False Positives) are reported for regular traffic. FortiWeb Machne Learning uses SVM (Support Vector Machine) algorithm to build up the bot detection model which is self-learned from traffic patterns of regular clients. New client HTTP-requests are compared against that of the regular clients based on the mathimatical model created. If requests of a particular client don't match over the configured periode (anomaly), than FortiWeb will classify that client as a bot. When the traffic patterns of the regular clients vary dramatically (e.g. the functions of your application have changed leading to different behavior), FortiWeb automatically refreshes the bot detection model to adapt to the changes.","title":"Introduction"},{"location":"fwb-machinelearning-refresh/#basic-concepts_1","text":"The bot detection model has three stages: sample collecting , model building , and model running . Sample Collecting To build up a bot detection model, the system collects samples (also called vector) of users' behaviors when they are visiting your application. Each sample records a certain user's behaviors in a certain time range. The samples are split into two parts. Three quarters of the samples are divided into training sample set. One quarter of the samples are divided into testing sample set. Model Building During the model building stage, the system observes the training samples to self-learn user behavior profiles and builds up mathematical models using the SVM (Support Vector Machine) algorithm. The SVM parameters are used to eliminate rogue training samples and control individual sample influence on the overall result. Multiple models are built based on different parameter combinations in the SVM algorithm. According to the training accuracy, cross-validation value, testing accuracy, and the model type you have configured, the system narrows down the selection to one model and uses it as the bot detection model. Model Running When the bot detection model is in running state, the system compares users' behaviors against the bot detection model. If the traffic from a certain user doesn't match the model, the system will record the traffic as an anomaly. If a certain times of anomalies are recorded for this user, the system will take actions such as sending alert emails or blocking the traffic from this user. It's possible that sometimes the traffic is false positively detected as an anomaly. The system uses Bot Confirmation to confirm whether an anomaly is indeed a bot. If the false positive detection occurs so many times that it exceeds a certain threshold, the system considers the current bot detection model invalid, and automatically updates the model.","title":"Basic Concepts"},{"location":"fwb-machinelearning-refresh/#benefits_1","text":"Completely Automatic Near False Positives Free Near False Negatives Free Online Admin Guide on ML-Bot Detection is available here","title":"Benefits"},{"location":"fwb-machinelearning-refresh/#api-protection","text":"","title":"API Protection"},{"location":"fwb-machinelearning-refresh/#introduction_2","text":"With the release of FortiWEB v7.0, API Protection (Machine Learning) was released. This compliments the exiting 5 API protection methods including JSON, XML, OpenAPI, API Gateeway and Mobile API. The machine learning based API Protection learns the REST API data structure from user traffic samples and then build a mathematical model to screen out malicious API requests. It analyzes the method, URL, and endpoint data of the API request samples to generate an API data structure file for your application. This file describes the URL pattern and schema of endpoint data. If the incoming API request violates the data structure, it will be detected as an attack. API Protection supports JSON request body or responses.","title":"Introduction"},{"location":"fwb-machinelearning-refresh/#api-discovery","text":"A successful REST API sample (request & response) must follow the server\u2019s API specification API discovery: restore the API specification from user traffic by profiling API samples. One key step in API discovery is to determine whether multiple API samples belong to the same API. The API discovery problem can be formulated as an unsupervised learning problem which can be solved by clustering algorithms. We designed a new clustering algorithm, URL clustering with schema awareness, to solve the problem. The algorithm can be considered as a variant of the well-known leader clustering algorithm. Clustering is often used as a data analysis technique for discovering interesting patterns in data, such as grouping customers based on their behaviour.","title":"API Discovery"},{"location":"fwb-machinelearning-refresh/#api-10-dimensions-examined","text":"URL distance Generalized Hamming distance for vectorized URLs Path parameters Schema of parameters in URL path Query parameters Schema of parameters appended to the URL. Header parameters Schema of parameters in custom headers Cookie parameters Schema of cookie values HTTP request body Schema of HTTP request body HTTP method Type of HTTP methods, eg., GET, SET, PUT, POST... Media type Type of media type, e.g., XML, JSON, etc. HTTP status code Only successful requests shall be used for model training HTTP response body Schema of response body","title":"API - 10 Dimensions examined"},{"location":"fwb-machinelearning-refresh/#architecture-and-components","text":"High Level Architecture and System Components Preprocessing module: extract user data schema, construct API samples Inference module: evaluate the API samples with pre-trained machine learning models, feed sample outliers to the model training module, generate security scores for API samples Model training module: train ML models using our API profiling algorithm and send updates to the inference module API protection module: determine following actions based on security scores and user API protection policies.","title":"Architecture and Components"},{"location":"fwb-machinelearning-refresh/#benefits_2","text":"API discovery will \u201cprofile\u201d the REST APIs from user traffic. By learning and build the specification of changing APIs, machine learning will identify: Ambiguity in URL pattern Ambiguity in Schema","title":"Benefits"},{"location":"setup/","text":"Manual preparation 1.1 Licensing No licenses are needed to run the Demo's and Lab. 1.2 Lubuntu Setup Lubuntu client is running as a live CD ISO image, and needs a little tweaking. Run this every time you restart Lubuntu client. Connect via FortiPoC WebUI > Client > DISPLAY to the Lubuntu client running inside FortiPoC. Open a LXTerminal window (Start menu > System Tools) $ cd Downloads $ wget http://10.2.2.254/static/docs/latest/lubuntu-setup.sh $ sudo bash lubuntu-setup.sh The Lubuntu client is now reachable by ssh, the password is fortinet","title":"Preparation (mandatory)"},{"location":"setup/#manual-preparation","text":"","title":"Manual preparation"},{"location":"setup/#11-licensing","text":"No licenses are needed to run the Demo's and Lab.","title":"1.1 Licensing"},{"location":"setup/#12-lubuntu-setup","text":"Lubuntu client is running as a live CD ISO image, and needs a little tweaking. Run this every time you restart Lubuntu client. Connect via FortiPoC WebUI > Client > DISPLAY to the Lubuntu client running inside FortiPoC. Open a LXTerminal window (Start menu > System Tools) $ cd Downloads $ wget http://10.2.2.254/static/docs/latest/lubuntu-setup.sh $ sudo bash lubuntu-setup.sh The Lubuntu client is now reachable by ssh, the password is fortinet","title":"1.2 Lubuntu Setup"}]}